// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::sdk::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.9.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -2087141637;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__sdk__BreezSdkLiquid_accept_payment_proposed_fees_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_accept_payment_proposed_fees",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req =
                <crate::models::AcceptPaymentProposedFeesRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::sdk::BreezSdkLiquid::accept_payment_proposed_fees(
                            &*api_that_guard,
                            api_req,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_add_event_listener_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_add_event_listener",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_listener = <StreamSink<
                crate::events::SdkEvent,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::sdk::BreezSdkLiquid::add_event_listener(
                            &*api_that_guard,
                            api_listener,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_backup_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_backup",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::BackupRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, crate::errors::SdkError>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = crate::sdk::BreezSdkLiquid::backup(&*api_that_guard, api_req)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_buy_bitcoin_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_buy_bitcoin",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::BuyBitcoinRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::buy_bitcoin(&*api_that_guard, api_req)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_check_message_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_check_message",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::CheckMessageRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, crate::errors::SdkError>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok =
                    crate::sdk::BreezSdkLiquid::check_message(&*api_that_guard, api_req)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_create_bolt12_invoice_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_create_bolt12_invoice",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req =
                <crate::models::CreateBolt12InvoiceRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::sdk::BreezSdkLiquid::create_bolt12_invoice(
                            &*api_that_guard,
                            api_req,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_disconnect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_disconnect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::disconnect(&*api_that_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_empty_wallet_cache_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_empty_wallet_cache",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, crate::errors::SdkError>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = crate::sdk::BreezSdkLiquid::empty_wallet_cache(&*api_that_guard)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_fetch_fiat_rates_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_fetch_fiat_rates",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::fetch_fiat_rates(&*api_that_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_fetch_lightning_limits_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_fetch_lightning_limits",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::fetch_lightning_limits(&*api_that_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_fetch_onchain_limits_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_fetch_onchain_limits",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::fetch_onchain_limits(&*api_that_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_fetch_payment_proposed_fees_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_fetch_payment_proposed_fees",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req =
                <crate::models::FetchPaymentProposedFeesRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::sdk::BreezSdkLiquid::fetch_payment_proposed_fees(
                            &*api_that_guard,
                            api_req,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_get_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_get_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::get_info(&*api_that_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_get_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_get_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::GetPaymentRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::get_payment(&*api_that_guard, api_req)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_list_fiat_currencies_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_list_fiat_currencies",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::list_fiat_currencies(&*api_that_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_list_payments_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_list_payments",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::ListPaymentsRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::list_payments(&*api_that_guard, api_req)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_list_refundables_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_list_refundables",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::list_refundables(&*api_that_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_lnurl_auth_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_lnurl_auth",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req_data = <crate::models::LnUrlAuthRequestData>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::duplicates::LnUrlAuthError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::lnurl_auth(&*api_that_guard, api_req_data)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_lnurl_pay_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_lnurl_pay",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::LnUrlPayRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::duplicates::LnUrlPayError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::lnurl_pay(&*api_that_guard, api_req)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_lnurl_withdraw_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_lnurl_withdraw",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::LnUrlWithdrawRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::duplicates::LnUrlWithdrawError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::lnurl_withdraw(&*api_that_guard, api_req)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_parse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_parse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_input = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::parse(&*api_that_guard, api_input).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_pay_onchain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_pay_onchain",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::PayOnchainRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::pay_onchain(&*api_that_guard, api_req)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_prepare_buy_bitcoin_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_prepare_buy_bitcoin",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::PrepareBuyBitcoinRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::sdk::BreezSdkLiquid::prepare_buy_bitcoin(
                            &*api_that_guard,
                            api_req,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_prepare_lnurl_pay_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_prepare_lnurl_pay",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::PrepareLnUrlPayRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::duplicates::LnUrlPayError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::sdk::BreezSdkLiquid::prepare_lnurl_pay(
                            &*api_that_guard,
                            api_req,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_prepare_pay_onchain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_prepare_pay_onchain",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::PreparePayOnchainRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::sdk::BreezSdkLiquid::prepare_pay_onchain(
                            &*api_that_guard,
                            api_req,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_prepare_receive_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_prepare_receive_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::PrepareReceiveRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::sdk::BreezSdkLiquid::prepare_receive_payment(
                            &*api_that_guard,
                            api_req,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_prepare_refund_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_prepare_refund",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::PrepareRefundRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::prepare_refund(&*api_that_guard, api_req)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_prepare_send_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_prepare_send_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::PrepareSendRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::sdk::BreezSdkLiquid::prepare_send_payment(
                            &*api_that_guard,
                            api_req,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_receive_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_receive_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::ReceivePaymentRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::receive_payment(&*api_that_guard, api_req)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_recommended_fees_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_recommended_fees",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::recommended_fees(&*api_that_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_refund_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_refund",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::RefundRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::refund(&*api_that_guard, api_req).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_register_webhook_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_register_webhook",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_webhook_url = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::sdk::BreezSdkLiquid::register_webhook(
                            &*api_that_guard,
                            api_webhook_url,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_rescan_onchain_swaps_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_rescan_onchain_swaps",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::rescan_onchain_swaps(&*api_that_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_restore_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_restore",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::RestoreRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, crate::errors::SdkError>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok = crate::sdk::BreezSdkLiquid::restore(&*api_that_guard, api_req)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_send_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_send_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::SendPaymentRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::PaymentError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::send_payment(&*api_that_guard, api_req)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_sign_message_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_sign_message",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            let api_req = <crate::models::SignMessageRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, crate::errors::SdkError>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that_guard = api_that_guard.unwrap();
                let output_ok =
                    crate::sdk::BreezSdkLiquid::sign_message(&*api_that_guard, api_req)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_sync(dart_style=sync)",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok = crate::sdk::BreezSdkLiquid::sync(&*api_that_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__BreezSdkLiquid_unregister_webhook_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BreezSdkLiquid_unregister_webhook",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let mut api_that_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_guard =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that_guard = api_that_guard.unwrap();
                        let output_ok =
                            crate::sdk::BreezSdkLiquid::unregister_webhook(&*api_that_guard)
                                .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__logger__breez_log_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "breez_log_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <StreamSink<
                crate::logger::LogEntry,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::logger::breez_log_stream(api_s)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__sdk__connect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "connect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_req = <crate::models::ConnectRequest>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::errors::SdkError>(
                    (move || async move {
                        let output_ok = crate::sdk::connect(api_req).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__sdk__default_config_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "default_config",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_network = <crate::models::LiquidNetwork>::sse_decode(&mut deserializer);
            let api_breez_api_key = <Option<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, crate::errors::SdkError>((move || {
                let output_ok = crate::sdk::default_config(api_network, api_breez_api_key)?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__sdk__parse_invoice_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse_invoice",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, crate::errors::PaymentError>((move || {
                let output_ok = crate::sdk::parse_invoice(api_input)?;
                Ok(output_ok)
            })())
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    {
        let AcceptPaymentProposedFeesRequest =
            None::<crate::models::AcceptPaymentProposedFeesRequest>.unwrap();
        let _: crate::models::FetchPaymentProposedFeesResponse =
            AcceptPaymentProposedFeesRequest.response;
    }
    {
        let AesSuccessActionData = None::<crate::models::AesSuccessActionData>.unwrap();
        let _: String = AesSuccessActionData.description;
        let _: String = AesSuccessActionData.ciphertext;
        let _: String = AesSuccessActionData.iv;
    }
    {
        let AesSuccessActionDataDecrypted =
            None::<crate::models::AesSuccessActionDataDecrypted>.unwrap();
        let _: String = AesSuccessActionDataDecrypted.description;
        let _: String = AesSuccessActionDataDecrypted.plaintext;
    }
    match None::<crate::models::AesSuccessActionDataResult>.unwrap() {
        crate::models::AesSuccessActionDataResult::Decrypted { data } => {
            let _: crate::models::AesSuccessActionDataDecrypted = data;
        }
        crate::models::AesSuccessActionDataResult::ErrorStatus { reason } => {
            let _: String = reason;
        }
    }
    match None::<crate::models::Amount>.unwrap() {
        crate::models::Amount::Bitcoin { amount_msat } => {
            let _: u64 = amount_msat;
        }
        crate::models::Amount::Currency {
            iso4217_code,
            fractional_amount,
        } => {
            let _: String = iso4217_code;
            let _: u64 = fractional_amount;
        }
    }
    {
        let AssetBalance = None::<crate::models::AssetBalance>.unwrap();
        let _: String = AssetBalance.asset_id;
        let _: u64 = AssetBalance.balance_sat;
        let _: Option<String> = AssetBalance.name;
        let _: Option<String> = AssetBalance.ticker;
        let _: Option<f64> = AssetBalance.balance;
    }
    {
        let AssetInfo = None::<crate::models::AssetInfo>.unwrap();
        let _: String = AssetInfo.name;
        let _: String = AssetInfo.ticker;
        let _: f64 = AssetInfo.amount;
        let _: Option<f64> = AssetInfo.fees;
    }
    {
        let AssetMetadata = None::<crate::models::AssetMetadata>.unwrap();
        let _: String = AssetMetadata.asset_id;
        let _: String = AssetMetadata.name;
        let _: String = AssetMetadata.ticker;
        let _: u8 = AssetMetadata.precision;
        let _: Option<String> = AssetMetadata.fiat_id;
    }
    {
        let BackupRequest = None::<crate::models::BackupRequest>.unwrap();
        let _: Option<String> = BackupRequest.backup_path;
    }
    {
        let BitcoinAddressData = None::<crate::models::BitcoinAddressData>.unwrap();
        let _: String = BitcoinAddressData.address;
        let _: crate::models::Network = BitcoinAddressData.network;
        let _: Option<u64> = BitcoinAddressData.amount_sat;
        let _: Option<String> = BitcoinAddressData.label;
        let _: Option<String> = BitcoinAddressData.message;
    }
    match None::<crate::models::BlockchainExplorer>.unwrap() {
        crate::models::BlockchainExplorer::Electrum { url } => {
            let _: String = url;
        }
        crate::models::BlockchainExplorer::Esplora {
            url,
            use_waterfalls,
        } => {
            let _: String = url;
            let _: bool = use_waterfalls;
        }
    }
    {
        let BlockchainInfo = None::<crate::models::BlockchainInfo>.unwrap();
        let _: u32 = BlockchainInfo.liquid_tip;
        let _: u32 = BlockchainInfo.bitcoin_tip;
    }
    {
        let BuyBitcoinRequest = None::<crate::models::BuyBitcoinRequest>.unwrap();
        let _: crate::models::PrepareBuyBitcoinResponse = BuyBitcoinRequest.prepare_response;
        let _: Option<String> = BuyBitcoinRequest.redirect_url;
    }
    {
        let CheckMessageRequest = None::<crate::models::CheckMessageRequest>.unwrap();
        let _: String = CheckMessageRequest.message;
        let _: String = CheckMessageRequest.pubkey;
        let _: String = CheckMessageRequest.signature;
    }
    {
        let CheckMessageResponse = None::<crate::models::CheckMessageResponse>.unwrap();
        let _: bool = CheckMessageResponse.is_valid;
    }
    {
        let Config = None::<crate::models::Config>.unwrap();
        let _: crate::models::BlockchainExplorer = Config.liquid_explorer;
        let _: crate::models::BlockchainExplorer = Config.bitcoin_explorer;
        let _: String = Config.working_dir;
        let _: crate::models::LiquidNetwork = Config.network;
        let _: u64 = Config.payment_timeout_sec;
        let _: Option<String> = Config.sync_service_url;
        let _: Option<u64> = Config.zero_conf_max_amount_sat;
        let _: Option<String> = Config.breez_api_key;
        let _: Option<Vec<crate::models::ExternalInputParser>> = Config.external_input_parsers;
        let _: bool = Config.use_default_external_input_parsers;
        let _: Option<u64> = Config.onchain_fee_rate_leeway_sat;
        let _: Option<Vec<crate::models::AssetMetadata>> = Config.asset_metadata;
        let _: Option<String> = Config.sideswap_api_key;
        let _: bool = Config.use_magic_routing_hints;
    }
    {
        let ConnectRequest = None::<crate::models::ConnectRequest>.unwrap();
        let _: crate::models::Config = ConnectRequest.config;
        let _: Option<String> = ConnectRequest.mnemonic;
        let _: Option<String> = ConnectRequest.passphrase;
        let _: Option<Vec<u8>> = ConnectRequest.seed;
    }
    {
        let CreateBolt12InvoiceRequest = None::<crate::models::CreateBolt12InvoiceRequest>.unwrap();
        let _: String = CreateBolt12InvoiceRequest.offer;
        let _: String = CreateBolt12InvoiceRequest.invoice_request;
    }
    {
        let CreateBolt12InvoiceResponse =
            None::<crate::models::CreateBolt12InvoiceResponse>.unwrap();
        let _: String = CreateBolt12InvoiceResponse.invoice;
    }
    {
        let CurrencyInfo = None::<crate::models::CurrencyInfo>.unwrap();
        let _: String = CurrencyInfo.name;
        let _: u32 = CurrencyInfo.fraction_size;
        let _: Option<u32> = CurrencyInfo.spacing;
        let _: Option<crate::models::Symbol> = CurrencyInfo.symbol;
        let _: Option<crate::models::Symbol> = CurrencyInfo.uniq_symbol;
        let _: Vec<crate::models::LocalizedName> = CurrencyInfo.localized_name;
        let _: Vec<crate::models::LocaleOverrides> = CurrencyInfo.locale_overrides;
    }
    {
        let ExternalInputParser = None::<crate::models::ExternalInputParser>.unwrap();
        let _: String = ExternalInputParser.provider_id;
        let _: String = ExternalInputParser.input_regex;
        let _: String = ExternalInputParser.parser_url;
    }
    {
        let FetchPaymentProposedFeesRequest =
            None::<crate::models::FetchPaymentProposedFeesRequest>.unwrap();
        let _: String = FetchPaymentProposedFeesRequest.swap_id;
    }
    {
        let FetchPaymentProposedFeesResponse =
            None::<crate::models::FetchPaymentProposedFeesResponse>.unwrap();
        let _: String = FetchPaymentProposedFeesResponse.swap_id;
        let _: u64 = FetchPaymentProposedFeesResponse.fees_sat;
        let _: u64 = FetchPaymentProposedFeesResponse.payer_amount_sat;
        let _: u64 = FetchPaymentProposedFeesResponse.receiver_amount_sat;
    }
    {
        let FiatCurrency = None::<crate::models::FiatCurrency>.unwrap();
        let _: String = FiatCurrency.id;
        let _: crate::models::CurrencyInfo = FiatCurrency.info;
    }
    {
        let GetInfoResponse = None::<crate::models::GetInfoResponse>.unwrap();
        let _: crate::models::WalletInfo = GetInfoResponse.wallet_info;
        let _: crate::models::BlockchainInfo = GetInfoResponse.blockchain_info;
    }
    match None::<crate::models::GetPaymentRequest>.unwrap() {
        crate::models::GetPaymentRequest::PaymentHash { payment_hash } => {
            let _: String = payment_hash;
        }
        crate::models::GetPaymentRequest::SwapId { swap_id } => {
            let _: String = swap_id;
        }
    }
    match None::<crate::models::InputType>.unwrap() {
        crate::models::InputType::BitcoinAddress { address } => {
            let _: crate::models::BitcoinAddressData = address;
        }
        crate::models::InputType::LiquidAddress { address } => {
            let _: crate::models::LiquidAddressData = address;
        }
        crate::models::InputType::Bolt11 { invoice } => {
            let _: crate::models::LNInvoice = invoice;
        }
        crate::models::InputType::Bolt12Offer {
            offer,
            bip353_address,
        } => {
            let _: crate::models::LNOffer = offer;
            let _: Option<String> = bip353_address;
        }
        crate::models::InputType::NodeId { node_id } => {
            let _: String = node_id;
        }
        crate::models::InputType::Url { url } => {
            let _: String = url;
        }
        crate::models::InputType::LnUrlPay {
            data,
            bip353_address,
        } => {
            let _: crate::models::LnUrlPayRequestData = data;
            let _: Option<String> = bip353_address;
        }
        crate::models::InputType::LnUrlWithdraw { data } => {
            let _: crate::models::LnUrlWithdrawRequestData = data;
        }
        crate::models::InputType::LnUrlAuth { data } => {
            let _: crate::models::LnUrlAuthRequestData = data;
        }
        crate::models::InputType::LnUrlError { data } => {
            let _: crate::models::LnUrlErrorData = data;
        }
    }
    {
        let LightningPaymentLimitsResponse =
            None::<crate::models::LightningPaymentLimitsResponse>.unwrap();
        let _: crate::models::Limits = LightningPaymentLimitsResponse.send;
        let _: crate::models::Limits = LightningPaymentLimitsResponse.receive;
    }
    {
        let Limits = None::<crate::models::Limits>.unwrap();
        let _: u64 = Limits.min_sat;
        let _: u64 = Limits.max_sat;
        let _: u64 = Limits.max_zero_conf_sat;
    }
    {
        let LiquidAddressData = None::<crate::models::LiquidAddressData>.unwrap();
        let _: String = LiquidAddressData.address;
        let _: crate::models::Network = LiquidAddressData.network;
        let _: Option<String> = LiquidAddressData.asset_id;
        let _: Option<f64> = LiquidAddressData.amount;
        let _: Option<u64> = LiquidAddressData.amount_sat;
        let _: Option<String> = LiquidAddressData.label;
        let _: Option<String> = LiquidAddressData.message;
    }
    match None::<crate::models::ListPaymentDetails>.unwrap() {
        crate::models::ListPaymentDetails::Liquid {
            asset_id,
            destination,
        } => {
            let _: Option<String> = asset_id;
            let _: Option<String> = destination;
        }
        crate::models::ListPaymentDetails::Bitcoin { address } => {
            let _: Option<String> = address;
        }
    }
    {
        let ListPaymentsRequest = None::<crate::models::ListPaymentsRequest>.unwrap();
        let _: Option<Vec<crate::models::PaymentType>> = ListPaymentsRequest.filters;
        let _: Option<Vec<crate::models::PaymentState>> = ListPaymentsRequest.states;
        let _: Option<i64> = ListPaymentsRequest.from_timestamp;
        let _: Option<i64> = ListPaymentsRequest.to_timestamp;
        let _: Option<u32> = ListPaymentsRequest.offset;
        let _: Option<u32> = ListPaymentsRequest.limit;
        let _: Option<crate::models::ListPaymentDetails> = ListPaymentsRequest.details;
        let _: Option<bool> = ListPaymentsRequest.sort_ascending;
    }
    {
        let LNInvoice = None::<crate::models::LNInvoice>.unwrap();
        let _: String = LNInvoice.bolt11;
        let _: crate::models::Network = LNInvoice.network;
        let _: String = LNInvoice.payee_pubkey;
        let _: String = LNInvoice.payment_hash;
        let _: Option<String> = LNInvoice.description;
        let _: Option<String> = LNInvoice.description_hash;
        let _: Option<u64> = LNInvoice.amount_msat;
        let _: u64 = LNInvoice.timestamp;
        let _: u64 = LNInvoice.expiry;
        let _: Vec<crate::models::RouteHint> = LNInvoice.routing_hints;
        let _: Vec<u8> = LNInvoice.payment_secret;
        let _: u64 = LNInvoice.min_final_cltv_expiry_delta;
    }
    {
        let LNOffer = None::<crate::models::LNOffer>.unwrap();
        let _: String = LNOffer.offer;
        let _: Vec<String> = LNOffer.chains;
        let _: Option<crate::models::Amount> = LNOffer.min_amount;
        let _: Option<String> = LNOffer.description;
        let _: Option<u64> = LNOffer.absolute_expiry;
        let _: Option<String> = LNOffer.issuer;
        let _: Option<String> = LNOffer.signing_pubkey;
        let _: Vec<crate::models::LnOfferBlindedPath> = LNOffer.paths;
    }
    {
        let LnOfferBlindedPath = None::<crate::models::LnOfferBlindedPath>.unwrap();
        let _: Vec<String> = LnOfferBlindedPath.blinded_hops;
    }
    {
        let LnUrlAuthRequestData = None::<crate::models::LnUrlAuthRequestData>.unwrap();
        let _: String = LnUrlAuthRequestData.k1;
        let _: Option<String> = LnUrlAuthRequestData.action;
        let _: String = LnUrlAuthRequestData.domain;
        let _: String = LnUrlAuthRequestData.url;
    }
    {
        let LnUrlErrorData = None::<crate::models::LnUrlErrorData>.unwrap();
        let _: String = LnUrlErrorData.reason;
    }
    {
        let LnUrlInfo = None::<crate::models::LnUrlInfo>.unwrap();
        let _: Option<String> = LnUrlInfo.ln_address;
        let _: Option<String> = LnUrlInfo.lnurl_pay_comment;
        let _: Option<String> = LnUrlInfo.lnurl_pay_domain;
        let _: Option<String> = LnUrlInfo.lnurl_pay_metadata;
        let _: Option<crate::models::SuccessActionProcessed> = LnUrlInfo.lnurl_pay_success_action;
        let _: Option<crate::models::SuccessAction> =
            LnUrlInfo.lnurl_pay_unprocessed_success_action;
        let _: Option<String> = LnUrlInfo.lnurl_withdraw_endpoint;
    }
    {
        let LnUrlPayErrorData = None::<crate::models::LnUrlPayErrorData>.unwrap();
        let _: String = LnUrlPayErrorData.payment_hash;
        let _: String = LnUrlPayErrorData.reason;
    }
    {
        let LnUrlPayRequest = None::<crate::models::LnUrlPayRequest>.unwrap();
        let _: crate::models::PrepareLnUrlPayResponse = LnUrlPayRequest.prepare_response;
    }
    {
        let LnUrlPayRequestData = None::<crate::models::LnUrlPayRequestData>.unwrap();
        let _: String = LnUrlPayRequestData.callback;
        let _: u64 = LnUrlPayRequestData.min_sendable;
        let _: u64 = LnUrlPayRequestData.max_sendable;
        let _: String = LnUrlPayRequestData.metadata_str;
        let _: u16 = LnUrlPayRequestData.comment_allowed;
        let _: String = LnUrlPayRequestData.domain;
        let _: bool = LnUrlPayRequestData.allows_nostr;
        let _: Option<String> = LnUrlPayRequestData.nostr_pubkey;
        let _: Option<String> = LnUrlPayRequestData.ln_address;
    }
    match None::<crate::models::LnUrlPayResult>.unwrap() {
        crate::models::LnUrlPayResult::EndpointSuccess { data } => {
            let _: crate::models::LnUrlPaySuccessData = data;
        }
        crate::models::LnUrlPayResult::EndpointError { data } => {
            let _: crate::models::LnUrlErrorData = data;
        }
        crate::models::LnUrlPayResult::PayError { data } => {
            let _: crate::models::LnUrlPayErrorData = data;
        }
    }
    {
        let LnUrlPaySuccessData = None::<crate::models::LnUrlPaySuccessData>.unwrap();
        let _: crate::models::Payment = LnUrlPaySuccessData.payment;
        let _: Option<crate::models::SuccessActionProcessed> = LnUrlPaySuccessData.success_action;
    }
    {
        let LnUrlWithdrawRequest = None::<crate::models::LnUrlWithdrawRequest>.unwrap();
        let _: crate::models::LnUrlWithdrawRequestData = LnUrlWithdrawRequest.data;
        let _: u64 = LnUrlWithdrawRequest.amount_msat;
        let _: Option<String> = LnUrlWithdrawRequest.description;
    }
    {
        let LnUrlWithdrawRequestData = None::<crate::models::LnUrlWithdrawRequestData>.unwrap();
        let _: String = LnUrlWithdrawRequestData.callback;
        let _: String = LnUrlWithdrawRequestData.k1;
        let _: String = LnUrlWithdrawRequestData.default_description;
        let _: u64 = LnUrlWithdrawRequestData.min_withdrawable;
        let _: u64 = LnUrlWithdrawRequestData.max_withdrawable;
    }
    {
        let LocaleOverrides = None::<crate::models::LocaleOverrides>.unwrap();
        let _: String = LocaleOverrides.locale;
        let _: Option<u32> = LocaleOverrides.spacing;
        let _: crate::models::Symbol = LocaleOverrides.symbol;
    }
    {
        let LocalizedName = None::<crate::models::LocalizedName>.unwrap();
        let _: String = LocalizedName.locale;
        let _: String = LocalizedName.name;
    }
    {
        let LogEntry = None::<crate::logger::LogEntry>.unwrap();
        let _: String = LogEntry.line;
        let _: String = LogEntry.level;
    }
    {
        let MessageSuccessActionData = None::<crate::models::MessageSuccessActionData>.unwrap();
        let _: String = MessageSuccessActionData.message;
    }
    {
        let OnchainPaymentLimitsResponse =
            None::<crate::models::OnchainPaymentLimitsResponse>.unwrap();
        let _: crate::models::Limits = OnchainPaymentLimitsResponse.send;
        let _: crate::models::Limits = OnchainPaymentLimitsResponse.receive;
    }
    match None::<crate::models::PayAmount>.unwrap() {
        crate::models::PayAmount::Bitcoin {
            receiver_amount_sat,
        } => {
            let _: u64 = receiver_amount_sat;
        }
        crate::models::PayAmount::Asset {
            to_asset,
            receiver_amount,
            estimate_asset_fees,
            from_asset,
        } => {
            let _: String = to_asset;
            let _: f64 = receiver_amount;
            let _: Option<bool> = estimate_asset_fees;
            let _: Option<String> = from_asset;
        }
        crate::models::PayAmount::Drain => {}
    }
    {
        let PayOnchainRequest = None::<crate::models::PayOnchainRequest>.unwrap();
        let _: String = PayOnchainRequest.address;
        let _: crate::models::PreparePayOnchainResponse = PayOnchainRequest.prepare_response;
    }
    {
        let Payment = None::<crate::models::Payment>.unwrap();
        let _: Option<String> = Payment.destination;
        let _: Option<String> = Payment.tx_id;
        let _: Option<String> = Payment.unblinding_data;
        let _: u32 = Payment.timestamp;
        let _: u64 = Payment.amount_sat;
        let _: u64 = Payment.fees_sat;
        let _: Option<u64> = Payment.swapper_fees_sat;
        let _: crate::models::PaymentType = Payment.payment_type;
        let _: crate::models::PaymentState = Payment.status;
        let _: crate::models::PaymentDetails = Payment.details;
    }
    match None::<crate::models::PaymentDetails>.unwrap() {
        crate::models::PaymentDetails::Lightning {
            swap_id,
            description,
            liquid_expiration_blockheight,
            preimage,
            invoice,
            bolt12_offer,
            payment_hash,
            destination_pubkey,
            lnurl_info,
            bip353_address,
            payer_note,
            claim_tx_id,
            refund_tx_id,
            refund_tx_amount_sat,
        } => {
            let _: String = swap_id;
            let _: String = description;
            let _: u32 = liquid_expiration_blockheight;
            let _: Option<String> = preimage;
            let _: Option<String> = invoice;
            let _: Option<String> = bolt12_offer;
            let _: Option<String> = payment_hash;
            let _: Option<String> = destination_pubkey;
            let _: Option<crate::models::LnUrlInfo> = lnurl_info;
            let _: Option<String> = bip353_address;
            let _: Option<String> = payer_note;
            let _: Option<String> = claim_tx_id;
            let _: Option<String> = refund_tx_id;
            let _: Option<u64> = refund_tx_amount_sat;
        }
        crate::models::PaymentDetails::Liquid {
            destination,
            description,
            asset_id,
            asset_info,
            lnurl_info,
            bip353_address,
            payer_note,
        } => {
            let _: String = destination;
            let _: String = description;
            let _: String = asset_id;
            let _: Option<crate::models::AssetInfo> = asset_info;
            let _: Option<crate::models::LnUrlInfo> = lnurl_info;
            let _: Option<String> = bip353_address;
            let _: Option<String> = payer_note;
        }
        crate::models::PaymentDetails::Bitcoin {
            swap_id,
            bitcoin_address,
            description,
            auto_accepted_fees,
            liquid_expiration_blockheight,
            bitcoin_expiration_blockheight,
            lockup_tx_id,
            claim_tx_id,
            refund_tx_id,
            refund_tx_amount_sat,
        } => {
            let _: String = swap_id;
            let _: String = bitcoin_address;
            let _: String = description;
            let _: bool = auto_accepted_fees;
            let _: u32 = liquid_expiration_blockheight;
            let _: u32 = bitcoin_expiration_blockheight;
            let _: Option<String> = lockup_tx_id;
            let _: Option<String> = claim_tx_id;
            let _: Option<String> = refund_tx_id;
            let _: Option<u64> = refund_tx_amount_sat;
        }
    }
    match None::<crate::errors::PaymentError>.unwrap() {
        crate::errors::PaymentError::AlreadyClaimed => {}
        crate::errors::PaymentError::AlreadyPaid => {}
        crate::errors::PaymentError::PaymentInProgress => {}
        crate::errors::PaymentError::AmountOutOfRange { min, max } => {
            let _: u64 = min;
            let _: u64 = max;
        }
        crate::errors::PaymentError::AmountMissing { err } => {
            let _: String = err;
        }
        crate::errors::PaymentError::AssetError { err } => {
            let _: String = err;
        }
        crate::errors::PaymentError::InvalidNetwork { err } => {
            let _: String = err;
        }
        crate::errors::PaymentError::Generic { err } => {
            let _: String = err;
        }
        crate::errors::PaymentError::InvalidOrExpiredFees => {}
        crate::errors::PaymentError::InsufficientFunds => {}
        crate::errors::PaymentError::InvalidDescription { err } => {
            let _: String = err;
        }
        crate::errors::PaymentError::InvalidInvoice { err } => {
            let _: String = err;
        }
        crate::errors::PaymentError::InvalidPreimage => {}
        crate::errors::PaymentError::PairsNotFound => {}
        crate::errors::PaymentError::PaymentTimeout => {}
        crate::errors::PaymentError::PersistError => {}
        crate::errors::PaymentError::ReceiveError { err } => {
            let _: String = err;
        }
        crate::errors::PaymentError::Refunded { err, refund_tx_id } => {
            let _: String = err;
            let _: String = refund_tx_id;
        }
        crate::errors::PaymentError::SelfTransferNotSupported => {}
        crate::errors::PaymentError::SendError { err } => {
            let _: String = err;
        }
        crate::errors::PaymentError::SignerError { err } => {
            let _: String = err;
        }
    }
    {
        let PrepareBuyBitcoinRequest = None::<crate::models::PrepareBuyBitcoinRequest>.unwrap();
        let _: crate::models::BuyBitcoinProvider = PrepareBuyBitcoinRequest.provider;
        let _: u64 = PrepareBuyBitcoinRequest.amount_sat;
    }
    {
        let PrepareBuyBitcoinResponse = None::<crate::models::PrepareBuyBitcoinResponse>.unwrap();
        let _: crate::models::BuyBitcoinProvider = PrepareBuyBitcoinResponse.provider;
        let _: u64 = PrepareBuyBitcoinResponse.amount_sat;
        let _: u64 = PrepareBuyBitcoinResponse.fees_sat;
    }
    {
        let PrepareLnUrlPayRequest = None::<crate::models::PrepareLnUrlPayRequest>.unwrap();
        let _: crate::models::LnUrlPayRequestData = PrepareLnUrlPayRequest.data;
        let _: crate::models::PayAmount = PrepareLnUrlPayRequest.amount;
        let _: Option<String> = PrepareLnUrlPayRequest.bip353_address;
        let _: Option<String> = PrepareLnUrlPayRequest.comment;
        let _: Option<bool> = PrepareLnUrlPayRequest.validate_success_action_url;
    }
    {
        let PrepareLnUrlPayResponse = None::<crate::models::PrepareLnUrlPayResponse>.unwrap();
        let _: crate::models::SendDestination = PrepareLnUrlPayResponse.destination;
        let _: u64 = PrepareLnUrlPayResponse.fees_sat;
        let _: crate::models::LnUrlPayRequestData = PrepareLnUrlPayResponse.data;
        let _: crate::models::PayAmount = PrepareLnUrlPayResponse.amount;
        let _: Option<String> = PrepareLnUrlPayResponse.comment;
        let _: Option<crate::models::SuccessAction> = PrepareLnUrlPayResponse.success_action;
    }
    {
        let PreparePayOnchainRequest = None::<crate::models::PreparePayOnchainRequest>.unwrap();
        let _: crate::models::PayAmount = PreparePayOnchainRequest.amount;
        let _: Option<u32> = PreparePayOnchainRequest.fee_rate_sat_per_vbyte;
    }
    {
        let PreparePayOnchainResponse = None::<crate::models::PreparePayOnchainResponse>.unwrap();
        let _: u64 = PreparePayOnchainResponse.receiver_amount_sat;
        let _: u64 = PreparePayOnchainResponse.claim_fees_sat;
        let _: u64 = PreparePayOnchainResponse.total_fees_sat;
    }
    {
        let PrepareReceiveRequest = None::<crate::models::PrepareReceiveRequest>.unwrap();
        let _: crate::models::PaymentMethod = PrepareReceiveRequest.payment_method;
        let _: Option<crate::models::ReceiveAmount> = PrepareReceiveRequest.amount;
    }
    {
        let PrepareReceiveResponse = None::<crate::models::PrepareReceiveResponse>.unwrap();
        let _: crate::models::PaymentMethod = PrepareReceiveResponse.payment_method;
        let _: u64 = PrepareReceiveResponse.fees_sat;
        let _: Option<crate::models::ReceiveAmount> = PrepareReceiveResponse.amount;
        let _: Option<u64> = PrepareReceiveResponse.min_payer_amount_sat;
        let _: Option<u64> = PrepareReceiveResponse.max_payer_amount_sat;
        let _: Option<f64> = PrepareReceiveResponse.swapper_feerate;
    }
    {
        let PrepareRefundRequest = None::<crate::models::PrepareRefundRequest>.unwrap();
        let _: String = PrepareRefundRequest.swap_address;
        let _: String = PrepareRefundRequest.refund_address;
        let _: u32 = PrepareRefundRequest.fee_rate_sat_per_vbyte;
    }
    {
        let PrepareRefundResponse = None::<crate::models::PrepareRefundResponse>.unwrap();
        let _: u32 = PrepareRefundResponse.tx_vsize;
        let _: u64 = PrepareRefundResponse.tx_fee_sat;
        let _: Option<String> = PrepareRefundResponse.last_refund_tx_id;
    }
    {
        let PrepareSendRequest = None::<crate::models::PrepareSendRequest>.unwrap();
        let _: String = PrepareSendRequest.destination;
        let _: Option<crate::models::PayAmount> = PrepareSendRequest.amount;
    }
    {
        let PrepareSendResponse = None::<crate::models::PrepareSendResponse>.unwrap();
        let _: crate::models::SendDestination = PrepareSendResponse.destination;
        let _: Option<crate::models::PayAmount> = PrepareSendResponse.amount;
        let _: Option<u64> = PrepareSendResponse.fees_sat;
        let _: Option<f64> = PrepareSendResponse.estimated_asset_fees;
        let _: Option<u64> = PrepareSendResponse.exchange_amount_sat;
    }
    {
        let Rate = None::<crate::models::Rate>.unwrap();
        let _: String = Rate.coin;
        let _: f64 = Rate.value;
    }
    match None::<crate::models::ReceiveAmount>.unwrap() {
        crate::models::ReceiveAmount::Bitcoin { payer_amount_sat } => {
            let _: u64 = payer_amount_sat;
        }
        crate::models::ReceiveAmount::Asset {
            asset_id,
            payer_amount,
        } => {
            let _: String = asset_id;
            let _: Option<f64> = payer_amount;
        }
    }
    {
        let ReceivePaymentRequest = None::<crate::models::ReceivePaymentRequest>.unwrap();
        let _: crate::models::PrepareReceiveResponse = ReceivePaymentRequest.prepare_response;
        let _: Option<String> = ReceivePaymentRequest.description;
        let _: Option<bool> = ReceivePaymentRequest.use_description_hash;
        let _: Option<String> = ReceivePaymentRequest.payer_note;
    }
    {
        let ReceivePaymentResponse = None::<crate::models::ReceivePaymentResponse>.unwrap();
        let _: String = ReceivePaymentResponse.destination;
        let _: Option<u32> = ReceivePaymentResponse.liquid_expiration_blockheight;
        let _: Option<u32> = ReceivePaymentResponse.bitcoin_expiration_blockheight;
    }
    {
        let RecommendedFees = None::<crate::models::RecommendedFees>.unwrap();
        let _: u64 = RecommendedFees.fastest_fee;
        let _: u64 = RecommendedFees.half_hour_fee;
        let _: u64 = RecommendedFees.hour_fee;
        let _: u64 = RecommendedFees.economy_fee;
        let _: u64 = RecommendedFees.minimum_fee;
    }
    {
        let RefundRequest = None::<crate::models::RefundRequest>.unwrap();
        let _: String = RefundRequest.swap_address;
        let _: String = RefundRequest.refund_address;
        let _: u32 = RefundRequest.fee_rate_sat_per_vbyte;
    }
    {
        let RefundResponse = None::<crate::models::RefundResponse>.unwrap();
        let _: String = RefundResponse.refund_tx_id;
    }
    {
        let RefundableSwap = None::<crate::models::RefundableSwap>.unwrap();
        let _: String = RefundableSwap.swap_address;
        let _: u32 = RefundableSwap.timestamp;
        let _: u64 = RefundableSwap.amount_sat;
        let _: Option<String> = RefundableSwap.last_refund_tx_id;
    }
    {
        let RestoreRequest = None::<crate::models::RestoreRequest>.unwrap();
        let _: Option<String> = RestoreRequest.backup_path;
    }
    {
        let RouteHint = None::<crate::models::RouteHint>.unwrap();
        let _: Vec<crate::models::RouteHintHop> = RouteHint.hops;
    }
    {
        let RouteHintHop = None::<crate::models::RouteHintHop>.unwrap();
        let _: String = RouteHintHop.src_node_id;
        let _: String = RouteHintHop.short_channel_id;
        let _: u32 = RouteHintHop.fees_base_msat;
        let _: u32 = RouteHintHop.fees_proportional_millionths;
        let _: u64 = RouteHintHop.cltv_expiry_delta;
        let _: Option<u64> = RouteHintHop.htlc_minimum_msat;
        let _: Option<u64> = RouteHintHop.htlc_maximum_msat;
    }
    match None::<crate::errors::SdkError>.unwrap() {
        crate::errors::SdkError::AlreadyStarted => {}
        crate::errors::SdkError::Generic { err } => {
            let _: String = err;
        }
        crate::errors::SdkError::NotStarted => {}
        crate::errors::SdkError::ServiceConnectivity { err } => {
            let _: String = err;
        }
    }
    match None::<crate::events::SdkEvent>.unwrap() {
        crate::events::SdkEvent::PaymentFailed { details } => {
            let _: crate::models::Payment = details;
        }
        crate::events::SdkEvent::PaymentPending { details } => {
            let _: crate::models::Payment = details;
        }
        crate::events::SdkEvent::PaymentRefundable { details } => {
            let _: crate::models::Payment = details;
        }
        crate::events::SdkEvent::PaymentRefunded { details } => {
            let _: crate::models::Payment = details;
        }
        crate::events::SdkEvent::PaymentRefundPending { details } => {
            let _: crate::models::Payment = details;
        }
        crate::events::SdkEvent::PaymentSucceeded { details } => {
            let _: crate::models::Payment = details;
        }
        crate::events::SdkEvent::PaymentWaitingConfirmation { details } => {
            let _: crate::models::Payment = details;
        }
        crate::events::SdkEvent::PaymentWaitingFeeAcceptance { details } => {
            let _: crate::models::Payment = details;
        }
        crate::events::SdkEvent::Synced => {}
        crate::events::SdkEvent::DataSynced {
            did_pull_new_records,
        } => {
            let _: bool = did_pull_new_records;
        }
    }
    match None::<crate::models::SendDestination>.unwrap() {
        crate::models::SendDestination::LiquidAddress {
            address_data,
            bip353_address,
        } => {
            let _: crate::models::LiquidAddressData = address_data;
            let _: Option<String> = bip353_address;
        }
        crate::models::SendDestination::Bolt11 {
            invoice,
            bip353_address,
        } => {
            let _: crate::models::LNInvoice = invoice;
            let _: Option<String> = bip353_address;
        }
        crate::models::SendDestination::Bolt12 {
            offer,
            receiver_amount_sat,
            bip353_address,
        } => {
            let _: crate::models::LNOffer = offer;
            let _: u64 = receiver_amount_sat;
            let _: Option<String> = bip353_address;
        }
    }
    {
        let SendPaymentRequest = None::<crate::models::SendPaymentRequest>.unwrap();
        let _: crate::models::PrepareSendResponse = SendPaymentRequest.prepare_response;
        let _: Option<bool> = SendPaymentRequest.use_asset_fees;
        let _: Option<String> = SendPaymentRequest.payer_note;
    }
    {
        let SendPaymentResponse = None::<crate::models::SendPaymentResponse>.unwrap();
        let _: crate::models::Payment = SendPaymentResponse.payment;
    }
    {
        let SignMessageRequest = None::<crate::models::SignMessageRequest>.unwrap();
        let _: String = SignMessageRequest.message;
    }
    {
        let SignMessageResponse = None::<crate::models::SignMessageResponse>.unwrap();
        let _: String = SignMessageResponse.signature;
    }
    match None::<crate::models::SuccessAction>.unwrap() {
        crate::models::SuccessAction::Aes { data } => {
            let _: crate::models::AesSuccessActionData = data;
        }
        crate::models::SuccessAction::Message { data } => {
            let _: crate::models::MessageSuccessActionData = data;
        }
        crate::models::SuccessAction::Url { data } => {
            let _: crate::models::UrlSuccessActionData = data;
        }
    }
    match None::<crate::models::SuccessActionProcessed>.unwrap() {
        crate::models::SuccessActionProcessed::Aes { result } => {
            let _: crate::models::AesSuccessActionDataResult = result;
        }
        crate::models::SuccessActionProcessed::Message { data } => {
            let _: crate::models::MessageSuccessActionData = data;
        }
        crate::models::SuccessActionProcessed::Url { data } => {
            let _: crate::models::UrlSuccessActionData = data;
        }
    }
    {
        let Symbol = None::<crate::models::Symbol>.unwrap();
        let _: Option<String> = Symbol.grapheme;
        let _: Option<String> = Symbol.template;
        let _: Option<bool> = Symbol.rtl;
        let _: Option<u32> = Symbol.position;
    }
    {
        let UrlSuccessActionData = None::<crate::models::UrlSuccessActionData>.unwrap();
        let _: String = UrlSuccessActionData.description;
        let _: String = UrlSuccessActionData.url;
        let _: bool = UrlSuccessActionData.matches_callback_domain;
    }
    {
        let WalletInfo = None::<crate::models::WalletInfo>.unwrap();
        let _: u64 = WalletInfo.balance_sat;
        let _: u64 = WalletInfo.pending_send_sat;
        let _: u64 = WalletInfo.pending_receive_sat;
        let _: String = WalletInfo.fingerprint;
        let _: String = WalletInfo.pubkey;
        let _: Vec<crate::models::AssetBalance> = WalletInfo.asset_balances;
    }
};

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for BreezSdkLiquid {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for StreamSink<crate::logger::LogEntry, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<crate::events::SdkEvent, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::models::AcceptPaymentProposedFeesRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_response =
            <crate::models::FetchPaymentProposedFeesResponse>::sse_decode(deserializer);
        return crate::models::AcceptPaymentProposedFeesRequest {
            response: var_response,
        };
    }
}

impl SseDecode for crate::models::AesSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_ciphertext = <String>::sse_decode(deserializer);
        let mut var_iv = <String>::sse_decode(deserializer);
        return crate::models::AesSuccessActionData {
            description: var_description,
            ciphertext: var_ciphertext,
            iv: var_iv,
        };
    }
}

impl SseDecode for crate::models::AesSuccessActionDataDecrypted {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_plaintext = <String>::sse_decode(deserializer);
        return crate::models::AesSuccessActionDataDecrypted {
            description: var_description,
            plaintext: var_plaintext,
        };
    }
}

impl SseDecode for crate::models::AesSuccessActionDataResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data =
                    <crate::models::AesSuccessActionDataDecrypted>::sse_decode(deserializer);
                return crate::models::AesSuccessActionDataResult::Decrypted { data: var_data };
            }
            1 => {
                let mut var_reason = <String>::sse_decode(deserializer);
                return crate::models::AesSuccessActionDataResult::ErrorStatus {
                    reason: var_reason,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::Amount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_amountMsat = <u64>::sse_decode(deserializer);
                return crate::models::Amount::Bitcoin {
                    amount_msat: var_amountMsat,
                };
            }
            1 => {
                let mut var_iso4217Code = <String>::sse_decode(deserializer);
                let mut var_fractionalAmount = <u64>::sse_decode(deserializer);
                return crate::models::Amount::Currency {
                    iso4217_code: var_iso4217Code,
                    fractional_amount: var_fractionalAmount,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::AssetBalance {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_assetId = <String>::sse_decode(deserializer);
        let mut var_balanceSat = <u64>::sse_decode(deserializer);
        let mut var_name = <Option<String>>::sse_decode(deserializer);
        let mut var_ticker = <Option<String>>::sse_decode(deserializer);
        let mut var_balance = <Option<f64>>::sse_decode(deserializer);
        return crate::models::AssetBalance {
            asset_id: var_assetId,
            balance_sat: var_balanceSat,
            name: var_name,
            ticker: var_ticker,
            balance: var_balance,
        };
    }
}

impl SseDecode for crate::models::AssetInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_ticker = <String>::sse_decode(deserializer);
        let mut var_amount = <f64>::sse_decode(deserializer);
        let mut var_fees = <Option<f64>>::sse_decode(deserializer);
        return crate::models::AssetInfo {
            name: var_name,
            ticker: var_ticker,
            amount: var_amount,
            fees: var_fees,
        };
    }
}

impl SseDecode for crate::models::AssetMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_assetId = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_ticker = <String>::sse_decode(deserializer);
        let mut var_precision = <u8>::sse_decode(deserializer);
        let mut var_fiatId = <Option<String>>::sse_decode(deserializer);
        return crate::models::AssetMetadata {
            asset_id: var_assetId,
            name: var_name,
            ticker: var_ticker,
            precision: var_precision,
            fiat_id: var_fiatId,
        };
    }
}

impl SseDecode for crate::models::BackupRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_backupPath = <Option<String>>::sse_decode(deserializer);
        return crate::models::BackupRequest {
            backup_path: var_backupPath,
        };
    }
}

impl SseDecode for crate::models::BitcoinAddressData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_network = <crate::models::Network>::sse_decode(deserializer);
        let mut var_amountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_message = <Option<String>>::sse_decode(deserializer);
        return crate::models::BitcoinAddressData {
            address: var_address,
            network: var_network,
            amount_sat: var_amountSat,
            label: var_label,
            message: var_message,
        };
    }
}

impl SseDecode for crate::models::BlockchainExplorer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_url = <String>::sse_decode(deserializer);
                return crate::models::BlockchainExplorer::Electrum { url: var_url };
            }
            1 => {
                let mut var_url = <String>::sse_decode(deserializer);
                let mut var_useWaterfalls = <bool>::sse_decode(deserializer);
                return crate::models::BlockchainExplorer::Esplora {
                    url: var_url,
                    use_waterfalls: var_useWaterfalls,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::BlockchainInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_liquidTip = <u32>::sse_decode(deserializer);
        let mut var_bitcoinTip = <u32>::sse_decode(deserializer);
        return crate::models::BlockchainInfo {
            liquid_tip: var_liquidTip,
            bitcoin_tip: var_bitcoinTip,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::models::BuyBitcoinProvider {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::BuyBitcoinProvider::Moonpay,
            _ => unreachable!("Invalid variant for BuyBitcoinProvider: {}", inner),
        };
    }
}

impl SseDecode for crate::models::BuyBitcoinRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_prepareResponse =
            <crate::models::PrepareBuyBitcoinResponse>::sse_decode(deserializer);
        let mut var_redirectUrl = <Option<String>>::sse_decode(deserializer);
        return crate::models::BuyBitcoinRequest {
            prepare_response: var_prepareResponse,
            redirect_url: var_redirectUrl,
        };
    }
}

impl SseDecode for crate::models::CheckMessageRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        let mut var_pubkey = <String>::sse_decode(deserializer);
        let mut var_signature = <String>::sse_decode(deserializer);
        return crate::models::CheckMessageRequest {
            message: var_message,
            pubkey: var_pubkey,
            signature: var_signature,
        };
    }
}

impl SseDecode for crate::models::CheckMessageResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_isValid = <bool>::sse_decode(deserializer);
        return crate::models::CheckMessageResponse {
            is_valid: var_isValid,
        };
    }
}

impl SseDecode for crate::models::Config {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_liquidExplorer = <crate::models::BlockchainExplorer>::sse_decode(deserializer);
        let mut var_bitcoinExplorer = <crate::models::BlockchainExplorer>::sse_decode(deserializer);
        let mut var_workingDir = <String>::sse_decode(deserializer);
        let mut var_network = <crate::models::LiquidNetwork>::sse_decode(deserializer);
        let mut var_paymentTimeoutSec = <u64>::sse_decode(deserializer);
        let mut var_syncServiceUrl = <Option<String>>::sse_decode(deserializer);
        let mut var_zeroConfMaxAmountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_breezApiKey = <Option<String>>::sse_decode(deserializer);
        let mut var_externalInputParsers =
            <Option<Vec<crate::models::ExternalInputParser>>>::sse_decode(deserializer);
        let mut var_useDefaultExternalInputParsers = <bool>::sse_decode(deserializer);
        let mut var_onchainFeeRateLeewaySat = <Option<u64>>::sse_decode(deserializer);
        let mut var_assetMetadata =
            <Option<Vec<crate::models::AssetMetadata>>>::sse_decode(deserializer);
        let mut var_sideswapApiKey = <Option<String>>::sse_decode(deserializer);
        let mut var_useMagicRoutingHints = <bool>::sse_decode(deserializer);
        return crate::models::Config {
            liquid_explorer: var_liquidExplorer,
            bitcoin_explorer: var_bitcoinExplorer,
            working_dir: var_workingDir,
            network: var_network,
            payment_timeout_sec: var_paymentTimeoutSec,
            sync_service_url: var_syncServiceUrl,
            zero_conf_max_amount_sat: var_zeroConfMaxAmountSat,
            breez_api_key: var_breezApiKey,
            external_input_parsers: var_externalInputParsers,
            use_default_external_input_parsers: var_useDefaultExternalInputParsers,
            onchain_fee_rate_leeway_sat: var_onchainFeeRateLeewaySat,
            asset_metadata: var_assetMetadata,
            sideswap_api_key: var_sideswapApiKey,
            use_magic_routing_hints: var_useMagicRoutingHints,
        };
    }
}

impl SseDecode for crate::models::ConnectRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_config = <crate::models::Config>::sse_decode(deserializer);
        let mut var_mnemonic = <Option<String>>::sse_decode(deserializer);
        let mut var_passphrase = <Option<String>>::sse_decode(deserializer);
        let mut var_seed = <Option<Vec<u8>>>::sse_decode(deserializer);
        return crate::models::ConnectRequest {
            config: var_config,
            mnemonic: var_mnemonic,
            passphrase: var_passphrase,
            seed: var_seed,
        };
    }
}

impl SseDecode for crate::models::CreateBolt12InvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_offer = <String>::sse_decode(deserializer);
        let mut var_invoiceRequest = <String>::sse_decode(deserializer);
        return crate::models::CreateBolt12InvoiceRequest {
            offer: var_offer,
            invoice_request: var_invoiceRequest,
        };
    }
}

impl SseDecode for crate::models::CreateBolt12InvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_invoice = <String>::sse_decode(deserializer);
        return crate::models::CreateBolt12InvoiceResponse {
            invoice: var_invoice,
        };
    }
}

impl SseDecode for crate::models::CurrencyInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_fractionSize = <u32>::sse_decode(deserializer);
        let mut var_spacing = <Option<u32>>::sse_decode(deserializer);
        let mut var_symbol = <Option<crate::models::Symbol>>::sse_decode(deserializer);
        let mut var_uniqSymbol = <Option<crate::models::Symbol>>::sse_decode(deserializer);
        let mut var_localizedName = <Vec<crate::models::LocalizedName>>::sse_decode(deserializer);
        let mut var_localeOverrides =
            <Vec<crate::models::LocaleOverrides>>::sse_decode(deserializer);
        return crate::models::CurrencyInfo {
            name: var_name,
            fraction_size: var_fractionSize,
            spacing: var_spacing,
            symbol: var_symbol,
            uniq_symbol: var_uniqSymbol,
            localized_name: var_localizedName,
            locale_overrides: var_localeOverrides,
        };
    }
}

impl SseDecode for crate::models::ExternalInputParser {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_providerId = <String>::sse_decode(deserializer);
        let mut var_inputRegex = <String>::sse_decode(deserializer);
        let mut var_parserUrl = <String>::sse_decode(deserializer);
        return crate::models::ExternalInputParser {
            provider_id: var_providerId,
            input_regex: var_inputRegex,
            parser_url: var_parserUrl,
        };
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::models::FetchPaymentProposedFeesRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_swapId = <String>::sse_decode(deserializer);
        return crate::models::FetchPaymentProposedFeesRequest {
            swap_id: var_swapId,
        };
    }
}

impl SseDecode for crate::models::FetchPaymentProposedFeesResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_swapId = <String>::sse_decode(deserializer);
        let mut var_feesSat = <u64>::sse_decode(deserializer);
        let mut var_payerAmountSat = <u64>::sse_decode(deserializer);
        let mut var_receiverAmountSat = <u64>::sse_decode(deserializer);
        return crate::models::FetchPaymentProposedFeesResponse {
            swap_id: var_swapId,
            fees_sat: var_feesSat,
            payer_amount_sat: var_payerAmountSat,
            receiver_amount_sat: var_receiverAmountSat,
        };
    }
}

impl SseDecode for crate::models::FiatCurrency {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_info = <crate::models::CurrencyInfo>::sse_decode(deserializer);
        return crate::models::FiatCurrency {
            id: var_id,
            info: var_info,
        };
    }
}

impl SseDecode for crate::models::GetInfoResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_walletInfo = <crate::models::WalletInfo>::sse_decode(deserializer);
        let mut var_blockchainInfo = <crate::models::BlockchainInfo>::sse_decode(deserializer);
        return crate::models::GetInfoResponse {
            wallet_info: var_walletInfo,
            blockchain_info: var_blockchainInfo,
        };
    }
}

impl SseDecode for crate::models::GetPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_paymentHash = <String>::sse_decode(deserializer);
                return crate::models::GetPaymentRequest::PaymentHash {
                    payment_hash: var_paymentHash,
                };
            }
            1 => {
                let mut var_swapId = <String>::sse_decode(deserializer);
                return crate::models::GetPaymentRequest::SwapId {
                    swap_id: var_swapId,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::models::InputType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_address = <crate::models::BitcoinAddressData>::sse_decode(deserializer);
                return crate::models::InputType::BitcoinAddress {
                    address: var_address,
                };
            }
            1 => {
                let mut var_address = <crate::models::LiquidAddressData>::sse_decode(deserializer);
                return crate::models::InputType::LiquidAddress {
                    address: var_address,
                };
            }
            2 => {
                let mut var_invoice = <crate::models::LNInvoice>::sse_decode(deserializer);
                return crate::models::InputType::Bolt11 {
                    invoice: var_invoice,
                };
            }
            3 => {
                let mut var_offer = <crate::models::LNOffer>::sse_decode(deserializer);
                let mut var_bip353Address = <Option<String>>::sse_decode(deserializer);
                return crate::models::InputType::Bolt12Offer {
                    offer: var_offer,
                    bip353_address: var_bip353Address,
                };
            }
            4 => {
                let mut var_nodeId = <String>::sse_decode(deserializer);
                return crate::models::InputType::NodeId {
                    node_id: var_nodeId,
                };
            }
            5 => {
                let mut var_url = <String>::sse_decode(deserializer);
                return crate::models::InputType::Url { url: var_url };
            }
            6 => {
                let mut var_data = <crate::models::LnUrlPayRequestData>::sse_decode(deserializer);
                let mut var_bip353Address = <Option<String>>::sse_decode(deserializer);
                return crate::models::InputType::LnUrlPay {
                    data: var_data,
                    bip353_address: var_bip353Address,
                };
            }
            7 => {
                let mut var_data =
                    <crate::models::LnUrlWithdrawRequestData>::sse_decode(deserializer);
                return crate::models::InputType::LnUrlWithdraw { data: var_data };
            }
            8 => {
                let mut var_data = <crate::models::LnUrlAuthRequestData>::sse_decode(deserializer);
                return crate::models::InputType::LnUrlAuth { data: var_data };
            }
            9 => {
                let mut var_data = <crate::models::LnUrlErrorData>::sse_decode(deserializer);
                return crate::models::InputType::LnUrlError { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::LightningPaymentLimitsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_send = <crate::models::Limits>::sse_decode(deserializer);
        let mut var_receive = <crate::models::Limits>::sse_decode(deserializer);
        return crate::models::LightningPaymentLimitsResponse {
            send: var_send,
            receive: var_receive,
        };
    }
}

impl SseDecode for crate::models::Limits {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_minSat = <u64>::sse_decode(deserializer);
        let mut var_maxSat = <u64>::sse_decode(deserializer);
        let mut var_maxZeroConfSat = <u64>::sse_decode(deserializer);
        return crate::models::Limits {
            min_sat: var_minSat,
            max_sat: var_maxSat,
            max_zero_conf_sat: var_maxZeroConfSat,
        };
    }
}

impl SseDecode for crate::models::LiquidAddressData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_network = <crate::models::Network>::sse_decode(deserializer);
        let mut var_assetId = <Option<String>>::sse_decode(deserializer);
        let mut var_amount = <Option<f64>>::sse_decode(deserializer);
        let mut var_amountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_message = <Option<String>>::sse_decode(deserializer);
        return crate::models::LiquidAddressData {
            address: var_address,
            network: var_network,
            asset_id: var_assetId,
            amount: var_amount,
            amount_sat: var_amountSat,
            label: var_label,
            message: var_message,
        };
    }
}

impl SseDecode for crate::models::LiquidNetwork {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::LiquidNetwork::Mainnet,
            1 => crate::models::LiquidNetwork::Testnet,
            2 => crate::models::LiquidNetwork::Regtest,
            _ => unreachable!("Invalid variant for LiquidNetwork: {}", inner),
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::AssetBalance> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::AssetBalance>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::AssetMetadata> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::AssetMetadata>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::ExternalInputParser> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::ExternalInputParser>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::FiatCurrency> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::FiatCurrency>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::LnOfferBlindedPath> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::LnOfferBlindedPath>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::LocaleOverrides> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::LocaleOverrides>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::LocalizedName> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::LocalizedName>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::Payment>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::models::ListPaymentDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_assetId = <Option<String>>::sse_decode(deserializer);
                let mut var_destination = <Option<String>>::sse_decode(deserializer);
                return crate::models::ListPaymentDetails::Liquid {
                    asset_id: var_assetId,
                    destination: var_destination,
                };
            }
            1 => {
                let mut var_address = <Option<String>>::sse_decode(deserializer);
                return crate::models::ListPaymentDetails::Bitcoin {
                    address: var_address,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for Vec<crate::models::PaymentState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::PaymentState>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::PaymentType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::PaymentType>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::models::ListPaymentsRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_filters = <Option<Vec<crate::models::PaymentType>>>::sse_decode(deserializer);
        let mut var_states = <Option<Vec<crate::models::PaymentState>>>::sse_decode(deserializer);
        let mut var_fromTimestamp = <Option<i64>>::sse_decode(deserializer);
        let mut var_toTimestamp = <Option<i64>>::sse_decode(deserializer);
        let mut var_offset = <Option<u32>>::sse_decode(deserializer);
        let mut var_limit = <Option<u32>>::sse_decode(deserializer);
        let mut var_details = <Option<crate::models::ListPaymentDetails>>::sse_decode(deserializer);
        let mut var_sortAscending = <Option<bool>>::sse_decode(deserializer);
        return crate::models::ListPaymentsRequest {
            filters: var_filters,
            states: var_states,
            from_timestamp: var_fromTimestamp,
            to_timestamp: var_toTimestamp,
            offset: var_offset,
            limit: var_limit,
            details: var_details,
            sort_ascending: var_sortAscending,
        };
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::Rate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::Rate>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::RefundableSwap> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::RefundableSwap>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::RouteHint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::RouteHint>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::RouteHintHop> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::RouteHintHop>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::models::LNInvoice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bolt11 = <String>::sse_decode(deserializer);
        let mut var_network = <crate::models::Network>::sse_decode(deserializer);
        let mut var_payeePubkey = <String>::sse_decode(deserializer);
        let mut var_paymentHash = <String>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_descriptionHash = <Option<String>>::sse_decode(deserializer);
        let mut var_amountMsat = <Option<u64>>::sse_decode(deserializer);
        let mut var_timestamp = <u64>::sse_decode(deserializer);
        let mut var_expiry = <u64>::sse_decode(deserializer);
        let mut var_routingHints = <Vec<crate::models::RouteHint>>::sse_decode(deserializer);
        let mut var_paymentSecret = <Vec<u8>>::sse_decode(deserializer);
        let mut var_minFinalCltvExpiryDelta = <u64>::sse_decode(deserializer);
        return crate::models::LNInvoice {
            bolt11: var_bolt11,
            network: var_network,
            payee_pubkey: var_payeePubkey,
            payment_hash: var_paymentHash,
            description: var_description,
            description_hash: var_descriptionHash,
            amount_msat: var_amountMsat,
            timestamp: var_timestamp,
            expiry: var_expiry,
            routing_hints: var_routingHints,
            payment_secret: var_paymentSecret,
            min_final_cltv_expiry_delta: var_minFinalCltvExpiryDelta,
        };
    }
}

impl SseDecode for crate::models::LNOffer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_offer = <String>::sse_decode(deserializer);
        let mut var_chains = <Vec<String>>::sse_decode(deserializer);
        let mut var_minAmount = <Option<crate::models::Amount>>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_absoluteExpiry = <Option<u64>>::sse_decode(deserializer);
        let mut var_issuer = <Option<String>>::sse_decode(deserializer);
        let mut var_signingPubkey = <Option<String>>::sse_decode(deserializer);
        let mut var_paths = <Vec<crate::models::LnOfferBlindedPath>>::sse_decode(deserializer);
        return crate::models::LNOffer {
            offer: var_offer,
            chains: var_chains,
            min_amount: var_minAmount,
            description: var_description,
            absolute_expiry: var_absoluteExpiry,
            issuer: var_issuer,
            signing_pubkey: var_signingPubkey,
            paths: var_paths,
        };
    }
}

impl SseDecode for crate::models::LnOfferBlindedPath {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_blindedHops = <Vec<String>>::sse_decode(deserializer);
        return crate::models::LnOfferBlindedPath {
            blinded_hops: var_blindedHops,
        };
    }
}

impl SseDecode for crate::duplicates::LnUrlAuthError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlAuthError::Generic { err: var_err };
            }
            1 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlAuthError::InvalidUri { err: var_err };
            }
            2 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlAuthError::ServiceConnectivity { err: var_err };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::LnUrlAuthRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_k1 = <String>::sse_decode(deserializer);
        let mut var_action = <Option<String>>::sse_decode(deserializer);
        let mut var_domain = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        return crate::models::LnUrlAuthRequestData {
            k1: var_k1,
            action: var_action,
            domain: var_domain,
            url: var_url,
        };
    }
}

impl SseDecode for crate::duplicates::LnUrlCallbackStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::duplicates::LnUrlCallbackStatus::Ok;
            }
            1 => {
                let mut var_data = <crate::models::LnUrlErrorData>::sse_decode(deserializer);
                return crate::duplicates::LnUrlCallbackStatus::ErrorStatus { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::LnUrlErrorData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_reason = <String>::sse_decode(deserializer);
        return crate::models::LnUrlErrorData { reason: var_reason };
    }
}

impl SseDecode for crate::models::LnUrlInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_lnAddress = <Option<String>>::sse_decode(deserializer);
        let mut var_lnurlPayComment = <Option<String>>::sse_decode(deserializer);
        let mut var_lnurlPayDomain = <Option<String>>::sse_decode(deserializer);
        let mut var_lnurlPayMetadata = <Option<String>>::sse_decode(deserializer);
        let mut var_lnurlPaySuccessAction =
            <Option<crate::models::SuccessActionProcessed>>::sse_decode(deserializer);
        let mut var_lnurlPayUnprocessedSuccessAction =
            <Option<crate::models::SuccessAction>>::sse_decode(deserializer);
        let mut var_lnurlWithdrawEndpoint = <Option<String>>::sse_decode(deserializer);
        return crate::models::LnUrlInfo {
            ln_address: var_lnAddress,
            lnurl_pay_comment: var_lnurlPayComment,
            lnurl_pay_domain: var_lnurlPayDomain,
            lnurl_pay_metadata: var_lnurlPayMetadata,
            lnurl_pay_success_action: var_lnurlPaySuccessAction,
            lnurl_pay_unprocessed_success_action: var_lnurlPayUnprocessedSuccessAction,
            lnurl_withdraw_endpoint: var_lnurlWithdrawEndpoint,
        };
    }
}

impl SseDecode for crate::duplicates::LnUrlPayError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::duplicates::LnUrlPayError::AlreadyPaid;
            }
            1 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlPayError::Generic { err: var_err };
            }
            2 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlPayError::InsufficientBalance { err: var_err };
            }
            3 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlPayError::InvalidAmount { err: var_err };
            }
            4 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlPayError::InvalidInvoice { err: var_err };
            }
            5 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlPayError::InvalidNetwork { err: var_err };
            }
            6 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlPayError::InvalidUri { err: var_err };
            }
            7 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlPayError::InvoiceExpired { err: var_err };
            }
            8 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlPayError::PaymentFailed { err: var_err };
            }
            9 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlPayError::PaymentTimeout { err: var_err };
            }
            10 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlPayError::RouteNotFound { err: var_err };
            }
            11 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlPayError::RouteTooExpensive { err: var_err };
            }
            12 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlPayError::ServiceConnectivity { err: var_err };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::LnUrlPayErrorData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_paymentHash = <String>::sse_decode(deserializer);
        let mut var_reason = <String>::sse_decode(deserializer);
        return crate::models::LnUrlPayErrorData {
            payment_hash: var_paymentHash,
            reason: var_reason,
        };
    }
}

impl SseDecode for crate::models::LnUrlPayRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_prepareResponse =
            <crate::models::PrepareLnUrlPayResponse>::sse_decode(deserializer);
        return crate::models::LnUrlPayRequest {
            prepare_response: var_prepareResponse,
        };
    }
}

impl SseDecode for crate::models::LnUrlPayRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_callback = <String>::sse_decode(deserializer);
        let mut var_minSendable = <u64>::sse_decode(deserializer);
        let mut var_maxSendable = <u64>::sse_decode(deserializer);
        let mut var_metadataStr = <String>::sse_decode(deserializer);
        let mut var_commentAllowed = <u16>::sse_decode(deserializer);
        let mut var_domain = <String>::sse_decode(deserializer);
        let mut var_allowsNostr = <bool>::sse_decode(deserializer);
        let mut var_nostrPubkey = <Option<String>>::sse_decode(deserializer);
        let mut var_lnAddress = <Option<String>>::sse_decode(deserializer);
        return crate::models::LnUrlPayRequestData {
            callback: var_callback,
            min_sendable: var_minSendable,
            max_sendable: var_maxSendable,
            metadata_str: var_metadataStr,
            comment_allowed: var_commentAllowed,
            domain: var_domain,
            allows_nostr: var_allowsNostr,
            nostr_pubkey: var_nostrPubkey,
            ln_address: var_lnAddress,
        };
    }
}

impl SseDecode for crate::models::LnUrlPayResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data = <crate::models::LnUrlPaySuccessData>::sse_decode(deserializer);
                return crate::models::LnUrlPayResult::EndpointSuccess { data: var_data };
            }
            1 => {
                let mut var_data = <crate::models::LnUrlErrorData>::sse_decode(deserializer);
                return crate::models::LnUrlPayResult::EndpointError { data: var_data };
            }
            2 => {
                let mut var_data = <crate::models::LnUrlPayErrorData>::sse_decode(deserializer);
                return crate::models::LnUrlPayResult::PayError { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::LnUrlPaySuccessData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payment = <crate::models::Payment>::sse_decode(deserializer);
        let mut var_successAction =
            <Option<crate::models::SuccessActionProcessed>>::sse_decode(deserializer);
        return crate::models::LnUrlPaySuccessData {
            payment: var_payment,
            success_action: var_successAction,
        };
    }
}

impl SseDecode for crate::duplicates::LnUrlWithdrawError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlWithdrawError::Generic { err: var_err };
            }
            1 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlWithdrawError::InvalidAmount { err: var_err };
            }
            2 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlWithdrawError::InvalidInvoice { err: var_err };
            }
            3 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlWithdrawError::InvalidUri { err: var_err };
            }
            4 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlWithdrawError::InvoiceNoRoutingHints {
                    err: var_err,
                };
            }
            5 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::duplicates::LnUrlWithdrawError::ServiceConnectivity { err: var_err };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::LnUrlWithdrawRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data = <crate::models::LnUrlWithdrawRequestData>::sse_decode(deserializer);
        let mut var_amountMsat = <u64>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        return crate::models::LnUrlWithdrawRequest {
            data: var_data,
            amount_msat: var_amountMsat,
            description: var_description,
        };
    }
}

impl SseDecode for crate::models::LnUrlWithdrawRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_callback = <String>::sse_decode(deserializer);
        let mut var_k1 = <String>::sse_decode(deserializer);
        let mut var_defaultDescription = <String>::sse_decode(deserializer);
        let mut var_minWithdrawable = <u64>::sse_decode(deserializer);
        let mut var_maxWithdrawable = <u64>::sse_decode(deserializer);
        return crate::models::LnUrlWithdrawRequestData {
            callback: var_callback,
            k1: var_k1,
            default_description: var_defaultDescription,
            min_withdrawable: var_minWithdrawable,
            max_withdrawable: var_maxWithdrawable,
        };
    }
}

impl SseDecode for crate::duplicates::LnUrlWithdrawResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data =
                    <crate::duplicates::LnUrlWithdrawSuccessData>::sse_decode(deserializer);
                return crate::duplicates::LnUrlWithdrawResult::Ok { data: var_data };
            }
            1 => {
                let mut var_data =
                    <crate::duplicates::LnUrlWithdrawSuccessData>::sse_decode(deserializer);
                return crate::duplicates::LnUrlWithdrawResult::Timeout { data: var_data };
            }
            2 => {
                let mut var_data = <crate::models::LnUrlErrorData>::sse_decode(deserializer);
                return crate::duplicates::LnUrlWithdrawResult::ErrorStatus { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::duplicates::LnUrlWithdrawSuccessData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_invoice = <crate::models::LNInvoice>::sse_decode(deserializer);
        return crate::duplicates::LnUrlWithdrawSuccessData {
            invoice: var_invoice,
        };
    }
}

impl SseDecode for crate::models::LocaleOverrides {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_locale = <String>::sse_decode(deserializer);
        let mut var_spacing = <Option<u32>>::sse_decode(deserializer);
        let mut var_symbol = <crate::models::Symbol>::sse_decode(deserializer);
        return crate::models::LocaleOverrides {
            locale: var_locale,
            spacing: var_spacing,
            symbol: var_symbol,
        };
    }
}

impl SseDecode for crate::models::LocalizedName {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_locale = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        return crate::models::LocalizedName {
            locale: var_locale,
            name: var_name,
        };
    }
}

impl SseDecode for crate::logger::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_line = <String>::sse_decode(deserializer);
        let mut var_level = <String>::sse_decode(deserializer);
        return crate::logger::LogEntry {
            line: var_line,
            level: var_level,
        };
    }
}

impl SseDecode for crate::models::MessageSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::models::MessageSuccessActionData {
            message: var_message,
        };
    }
}

impl SseDecode for crate::models::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::Network::Bitcoin,
            1 => crate::models::Network::Testnet,
            2 => crate::models::Network::Signet,
            3 => crate::models::Network::Regtest,
            _ => unreachable!("Invalid variant for Network: {}", inner),
        };
    }
}

impl SseDecode for crate::models::OnchainPaymentLimitsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_send = <crate::models::Limits>::sse_decode(deserializer);
        let mut var_receive = <crate::models::Limits>::sse_decode(deserializer);
        return crate::models::OnchainPaymentLimitsResponse {
            send: var_send,
            receive: var_receive,
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::Amount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::Amount>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::AssetInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::AssetInfo>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::ListPaymentDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::ListPaymentDetails>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::LnUrlInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::LnUrlInfo>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::PayAmount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::PayAmount>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::Payment>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::ReceiveAmount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::ReceiveAmount>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::SuccessAction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::SuccessAction>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::SuccessActionProcessed> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::SuccessActionProcessed>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::Symbol> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::Symbol>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::models::AssetMetadata>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::models::AssetMetadata>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::models::ExternalInputParser>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::models::ExternalInputParser>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::models::PaymentState>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::models::PaymentState>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::models::PaymentType>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::models::PaymentType>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::models::PayAmount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_receiverAmountSat = <u64>::sse_decode(deserializer);
                return crate::models::PayAmount::Bitcoin {
                    receiver_amount_sat: var_receiverAmountSat,
                };
            }
            1 => {
                let mut var_toAsset = <String>::sse_decode(deserializer);
                let mut var_receiverAmount = <f64>::sse_decode(deserializer);
                let mut var_estimateAssetFees = <Option<bool>>::sse_decode(deserializer);
                let mut var_fromAsset = <Option<String>>::sse_decode(deserializer);
                return crate::models::PayAmount::Asset {
                    to_asset: var_toAsset,
                    receiver_amount: var_receiverAmount,
                    estimate_asset_fees: var_estimateAssetFees,
                    from_asset: var_fromAsset,
                };
            }
            2 => {
                return crate::models::PayAmount::Drain;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::PayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_prepareResponse =
            <crate::models::PreparePayOnchainResponse>::sse_decode(deserializer);
        return crate::models::PayOnchainRequest {
            address: var_address,
            prepare_response: var_prepareResponse,
        };
    }
}

impl SseDecode for crate::models::Payment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_destination = <Option<String>>::sse_decode(deserializer);
        let mut var_txId = <Option<String>>::sse_decode(deserializer);
        let mut var_unblindingData = <Option<String>>::sse_decode(deserializer);
        let mut var_timestamp = <u32>::sse_decode(deserializer);
        let mut var_amountSat = <u64>::sse_decode(deserializer);
        let mut var_feesSat = <u64>::sse_decode(deserializer);
        let mut var_swapperFeesSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_paymentType = <crate::models::PaymentType>::sse_decode(deserializer);
        let mut var_status = <crate::models::PaymentState>::sse_decode(deserializer);
        let mut var_details = <crate::models::PaymentDetails>::sse_decode(deserializer);
        return crate::models::Payment {
            destination: var_destination,
            tx_id: var_txId,
            unblinding_data: var_unblindingData,
            timestamp: var_timestamp,
            amount_sat: var_amountSat,
            fees_sat: var_feesSat,
            swapper_fees_sat: var_swapperFeesSat,
            payment_type: var_paymentType,
            status: var_status,
            details: var_details,
        };
    }
}

impl SseDecode for crate::models::PaymentDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_swapId = <String>::sse_decode(deserializer);
                let mut var_description = <String>::sse_decode(deserializer);
                let mut var_liquidExpirationBlockheight = <u32>::sse_decode(deserializer);
                let mut var_preimage = <Option<String>>::sse_decode(deserializer);
                let mut var_invoice = <Option<String>>::sse_decode(deserializer);
                let mut var_bolt12Offer = <Option<String>>::sse_decode(deserializer);
                let mut var_paymentHash = <Option<String>>::sse_decode(deserializer);
                let mut var_destinationPubkey = <Option<String>>::sse_decode(deserializer);
                let mut var_lnurlInfo =
                    <Option<crate::models::LnUrlInfo>>::sse_decode(deserializer);
                let mut var_bip353Address = <Option<String>>::sse_decode(deserializer);
                let mut var_payerNote = <Option<String>>::sse_decode(deserializer);
                let mut var_claimTxId = <Option<String>>::sse_decode(deserializer);
                let mut var_refundTxId = <Option<String>>::sse_decode(deserializer);
                let mut var_refundTxAmountSat = <Option<u64>>::sse_decode(deserializer);
                return crate::models::PaymentDetails::Lightning {
                    swap_id: var_swapId,
                    description: var_description,
                    liquid_expiration_blockheight: var_liquidExpirationBlockheight,
                    preimage: var_preimage,
                    invoice: var_invoice,
                    bolt12_offer: var_bolt12Offer,
                    payment_hash: var_paymentHash,
                    destination_pubkey: var_destinationPubkey,
                    lnurl_info: var_lnurlInfo,
                    bip353_address: var_bip353Address,
                    payer_note: var_payerNote,
                    claim_tx_id: var_claimTxId,
                    refund_tx_id: var_refundTxId,
                    refund_tx_amount_sat: var_refundTxAmountSat,
                };
            }
            1 => {
                let mut var_destination = <String>::sse_decode(deserializer);
                let mut var_description = <String>::sse_decode(deserializer);
                let mut var_assetId = <String>::sse_decode(deserializer);
                let mut var_assetInfo =
                    <Option<crate::models::AssetInfo>>::sse_decode(deserializer);
                let mut var_lnurlInfo =
                    <Option<crate::models::LnUrlInfo>>::sse_decode(deserializer);
                let mut var_bip353Address = <Option<String>>::sse_decode(deserializer);
                let mut var_payerNote = <Option<String>>::sse_decode(deserializer);
                return crate::models::PaymentDetails::Liquid {
                    destination: var_destination,
                    description: var_description,
                    asset_id: var_assetId,
                    asset_info: var_assetInfo,
                    lnurl_info: var_lnurlInfo,
                    bip353_address: var_bip353Address,
                    payer_note: var_payerNote,
                };
            }
            2 => {
                let mut var_swapId = <String>::sse_decode(deserializer);
                let mut var_bitcoinAddress = <String>::sse_decode(deserializer);
                let mut var_description = <String>::sse_decode(deserializer);
                let mut var_autoAcceptedFees = <bool>::sse_decode(deserializer);
                let mut var_liquidExpirationBlockheight = <u32>::sse_decode(deserializer);
                let mut var_bitcoinExpirationBlockheight = <u32>::sse_decode(deserializer);
                let mut var_lockupTxId = <Option<String>>::sse_decode(deserializer);
                let mut var_claimTxId = <Option<String>>::sse_decode(deserializer);
                let mut var_refundTxId = <Option<String>>::sse_decode(deserializer);
                let mut var_refundTxAmountSat = <Option<u64>>::sse_decode(deserializer);
                return crate::models::PaymentDetails::Bitcoin {
                    swap_id: var_swapId,
                    bitcoin_address: var_bitcoinAddress,
                    description: var_description,
                    auto_accepted_fees: var_autoAcceptedFees,
                    liquid_expiration_blockheight: var_liquidExpirationBlockheight,
                    bitcoin_expiration_blockheight: var_bitcoinExpirationBlockheight,
                    lockup_tx_id: var_lockupTxId,
                    claim_tx_id: var_claimTxId,
                    refund_tx_id: var_refundTxId,
                    refund_tx_amount_sat: var_refundTxAmountSat,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::errors::PaymentError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::errors::PaymentError::AlreadyClaimed;
            }
            1 => {
                return crate::errors::PaymentError::AlreadyPaid;
            }
            2 => {
                return crate::errors::PaymentError::PaymentInProgress;
            }
            3 => {
                let mut var_min = <u64>::sse_decode(deserializer);
                let mut var_max = <u64>::sse_decode(deserializer);
                return crate::errors::PaymentError::AmountOutOfRange {
                    min: var_min,
                    max: var_max,
                };
            }
            4 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::errors::PaymentError::AmountMissing { err: var_err };
            }
            5 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::errors::PaymentError::AssetError { err: var_err };
            }
            6 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::errors::PaymentError::InvalidNetwork { err: var_err };
            }
            7 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::errors::PaymentError::Generic { err: var_err };
            }
            8 => {
                return crate::errors::PaymentError::InvalidOrExpiredFees;
            }
            9 => {
                return crate::errors::PaymentError::InsufficientFunds;
            }
            10 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::errors::PaymentError::InvalidDescription { err: var_err };
            }
            11 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::errors::PaymentError::InvalidInvoice { err: var_err };
            }
            12 => {
                return crate::errors::PaymentError::InvalidPreimage;
            }
            13 => {
                return crate::errors::PaymentError::PairsNotFound;
            }
            14 => {
                return crate::errors::PaymentError::PaymentTimeout;
            }
            15 => {
                return crate::errors::PaymentError::PersistError;
            }
            16 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::errors::PaymentError::ReceiveError { err: var_err };
            }
            17 => {
                let mut var_err = <String>::sse_decode(deserializer);
                let mut var_refundTxId = <String>::sse_decode(deserializer);
                return crate::errors::PaymentError::Refunded {
                    err: var_err,
                    refund_tx_id: var_refundTxId,
                };
            }
            18 => {
                return crate::errors::PaymentError::SelfTransferNotSupported;
            }
            19 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::errors::PaymentError::SendError { err: var_err };
            }
            20 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::errors::PaymentError::SignerError { err: var_err };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::PaymentMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::PaymentMethod::Lightning,
            1 => crate::models::PaymentMethod::Bolt11Invoice,
            2 => crate::models::PaymentMethod::Bolt12Offer,
            3 => crate::models::PaymentMethod::BitcoinAddress,
            4 => crate::models::PaymentMethod::LiquidAddress,
            _ => unreachable!("Invalid variant for PaymentMethod: {}", inner),
        };
    }
}

impl SseDecode for crate::models::PaymentState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::PaymentState::Created,
            1 => crate::models::PaymentState::Pending,
            2 => crate::models::PaymentState::Complete,
            3 => crate::models::PaymentState::Failed,
            4 => crate::models::PaymentState::TimedOut,
            5 => crate::models::PaymentState::Refundable,
            6 => crate::models::PaymentState::RefundPending,
            7 => crate::models::PaymentState::WaitingFeeAcceptance,
            _ => unreachable!("Invalid variant for PaymentState: {}", inner),
        };
    }
}

impl SseDecode for crate::models::PaymentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::PaymentType::Receive,
            1 => crate::models::PaymentType::Send,
            _ => unreachable!("Invalid variant for PaymentType: {}", inner),
        };
    }
}

impl SseDecode for crate::models::PrepareBuyBitcoinRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_provider = <crate::models::BuyBitcoinProvider>::sse_decode(deserializer);
        let mut var_amountSat = <u64>::sse_decode(deserializer);
        return crate::models::PrepareBuyBitcoinRequest {
            provider: var_provider,
            amount_sat: var_amountSat,
        };
    }
}

impl SseDecode for crate::models::PrepareBuyBitcoinResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_provider = <crate::models::BuyBitcoinProvider>::sse_decode(deserializer);
        let mut var_amountSat = <u64>::sse_decode(deserializer);
        let mut var_feesSat = <u64>::sse_decode(deserializer);
        return crate::models::PrepareBuyBitcoinResponse {
            provider: var_provider,
            amount_sat: var_amountSat,
            fees_sat: var_feesSat,
        };
    }
}

impl SseDecode for crate::models::PrepareLnUrlPayRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data = <crate::models::LnUrlPayRequestData>::sse_decode(deserializer);
        let mut var_amount = <crate::models::PayAmount>::sse_decode(deserializer);
        let mut var_bip353Address = <Option<String>>::sse_decode(deserializer);
        let mut var_comment = <Option<String>>::sse_decode(deserializer);
        let mut var_validateSuccessActionUrl = <Option<bool>>::sse_decode(deserializer);
        return crate::models::PrepareLnUrlPayRequest {
            data: var_data,
            amount: var_amount,
            bip353_address: var_bip353Address,
            comment: var_comment,
            validate_success_action_url: var_validateSuccessActionUrl,
        };
    }
}

impl SseDecode for crate::models::PrepareLnUrlPayResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_destination = <crate::models::SendDestination>::sse_decode(deserializer);
        let mut var_feesSat = <u64>::sse_decode(deserializer);
        let mut var_data = <crate::models::LnUrlPayRequestData>::sse_decode(deserializer);
        let mut var_amount = <crate::models::PayAmount>::sse_decode(deserializer);
        let mut var_comment = <Option<String>>::sse_decode(deserializer);
        let mut var_successAction =
            <Option<crate::models::SuccessAction>>::sse_decode(deserializer);
        return crate::models::PrepareLnUrlPayResponse {
            destination: var_destination,
            fees_sat: var_feesSat,
            data: var_data,
            amount: var_amount,
            comment: var_comment,
            success_action: var_successAction,
        };
    }
}

impl SseDecode for crate::models::PreparePayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_amount = <crate::models::PayAmount>::sse_decode(deserializer);
        let mut var_feeRateSatPerVbyte = <Option<u32>>::sse_decode(deserializer);
        return crate::models::PreparePayOnchainRequest {
            amount: var_amount,
            fee_rate_sat_per_vbyte: var_feeRateSatPerVbyte,
        };
    }
}

impl SseDecode for crate::models::PreparePayOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_receiverAmountSat = <u64>::sse_decode(deserializer);
        let mut var_claimFeesSat = <u64>::sse_decode(deserializer);
        let mut var_totalFeesSat = <u64>::sse_decode(deserializer);
        return crate::models::PreparePayOnchainResponse {
            receiver_amount_sat: var_receiverAmountSat,
            claim_fees_sat: var_claimFeesSat,
            total_fees_sat: var_totalFeesSat,
        };
    }
}

impl SseDecode for crate::models::PrepareReceiveRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_paymentMethod = <crate::models::PaymentMethod>::sse_decode(deserializer);
        let mut var_amount = <Option<crate::models::ReceiveAmount>>::sse_decode(deserializer);
        return crate::models::PrepareReceiveRequest {
            payment_method: var_paymentMethod,
            amount: var_amount,
        };
    }
}

impl SseDecode for crate::models::PrepareReceiveResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_paymentMethod = <crate::models::PaymentMethod>::sse_decode(deserializer);
        let mut var_feesSat = <u64>::sse_decode(deserializer);
        let mut var_amount = <Option<crate::models::ReceiveAmount>>::sse_decode(deserializer);
        let mut var_minPayerAmountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_maxPayerAmountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_swapperFeerate = <Option<f64>>::sse_decode(deserializer);
        return crate::models::PrepareReceiveResponse {
            payment_method: var_paymentMethod,
            fees_sat: var_feesSat,
            amount: var_amount,
            min_payer_amount_sat: var_minPayerAmountSat,
            max_payer_amount_sat: var_maxPayerAmountSat,
            swapper_feerate: var_swapperFeerate,
        };
    }
}

impl SseDecode for crate::models::PrepareRefundRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_swapAddress = <String>::sse_decode(deserializer);
        let mut var_refundAddress = <String>::sse_decode(deserializer);
        let mut var_feeRateSatPerVbyte = <u32>::sse_decode(deserializer);
        return crate::models::PrepareRefundRequest {
            swap_address: var_swapAddress,
            refund_address: var_refundAddress,
            fee_rate_sat_per_vbyte: var_feeRateSatPerVbyte,
        };
    }
}

impl SseDecode for crate::models::PrepareRefundResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_txVsize = <u32>::sse_decode(deserializer);
        let mut var_txFeeSat = <u64>::sse_decode(deserializer);
        let mut var_lastRefundTxId = <Option<String>>::sse_decode(deserializer);
        return crate::models::PrepareRefundResponse {
            tx_vsize: var_txVsize,
            tx_fee_sat: var_txFeeSat,
            last_refund_tx_id: var_lastRefundTxId,
        };
    }
}

impl SseDecode for crate::models::PrepareSendRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_destination = <String>::sse_decode(deserializer);
        let mut var_amount = <Option<crate::models::PayAmount>>::sse_decode(deserializer);
        return crate::models::PrepareSendRequest {
            destination: var_destination,
            amount: var_amount,
        };
    }
}

impl SseDecode for crate::models::PrepareSendResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_destination = <crate::models::SendDestination>::sse_decode(deserializer);
        let mut var_amount = <Option<crate::models::PayAmount>>::sse_decode(deserializer);
        let mut var_feesSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_estimatedAssetFees = <Option<f64>>::sse_decode(deserializer);
        let mut var_exchangeAmountSat = <Option<u64>>::sse_decode(deserializer);
        return crate::models::PrepareSendResponse {
            destination: var_destination,
            amount: var_amount,
            fees_sat: var_feesSat,
            estimated_asset_fees: var_estimatedAssetFees,
            exchange_amount_sat: var_exchangeAmountSat,
        };
    }
}

impl SseDecode for crate::models::Rate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_coin = <String>::sse_decode(deserializer);
        let mut var_value = <f64>::sse_decode(deserializer);
        return crate::models::Rate {
            coin: var_coin,
            value: var_value,
        };
    }
}

impl SseDecode for crate::models::ReceiveAmount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_payerAmountSat = <u64>::sse_decode(deserializer);
                return crate::models::ReceiveAmount::Bitcoin {
                    payer_amount_sat: var_payerAmountSat,
                };
            }
            1 => {
                let mut var_assetId = <String>::sse_decode(deserializer);
                let mut var_payerAmount = <Option<f64>>::sse_decode(deserializer);
                return crate::models::ReceiveAmount::Asset {
                    asset_id: var_assetId,
                    payer_amount: var_payerAmount,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::ReceivePaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_prepareResponse =
            <crate::models::PrepareReceiveResponse>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_useDescriptionHash = <Option<bool>>::sse_decode(deserializer);
        let mut var_payerNote = <Option<String>>::sse_decode(deserializer);
        return crate::models::ReceivePaymentRequest {
            prepare_response: var_prepareResponse,
            description: var_description,
            use_description_hash: var_useDescriptionHash,
            payer_note: var_payerNote,
        };
    }
}

impl SseDecode for crate::models::ReceivePaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_destination = <String>::sse_decode(deserializer);
        let mut var_liquidExpirationBlockheight = <Option<u32>>::sse_decode(deserializer);
        let mut var_bitcoinExpirationBlockheight = <Option<u32>>::sse_decode(deserializer);
        return crate::models::ReceivePaymentResponse {
            destination: var_destination,
            liquid_expiration_blockheight: var_liquidExpirationBlockheight,
            bitcoin_expiration_blockheight: var_bitcoinExpirationBlockheight,
        };
    }
}

impl SseDecode for crate::models::RecommendedFees {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fastestFee = <u64>::sse_decode(deserializer);
        let mut var_halfHourFee = <u64>::sse_decode(deserializer);
        let mut var_hourFee = <u64>::sse_decode(deserializer);
        let mut var_economyFee = <u64>::sse_decode(deserializer);
        let mut var_minimumFee = <u64>::sse_decode(deserializer);
        return crate::models::RecommendedFees {
            fastest_fee: var_fastestFee,
            half_hour_fee: var_halfHourFee,
            hour_fee: var_hourFee,
            economy_fee: var_economyFee,
            minimum_fee: var_minimumFee,
        };
    }
}

impl SseDecode for crate::models::RefundRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_swapAddress = <String>::sse_decode(deserializer);
        let mut var_refundAddress = <String>::sse_decode(deserializer);
        let mut var_feeRateSatPerVbyte = <u32>::sse_decode(deserializer);
        return crate::models::RefundRequest {
            swap_address: var_swapAddress,
            refund_address: var_refundAddress,
            fee_rate_sat_per_vbyte: var_feeRateSatPerVbyte,
        };
    }
}

impl SseDecode for crate::models::RefundResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_refundTxId = <String>::sse_decode(deserializer);
        return crate::models::RefundResponse {
            refund_tx_id: var_refundTxId,
        };
    }
}

impl SseDecode for crate::models::RefundableSwap {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_swapAddress = <String>::sse_decode(deserializer);
        let mut var_timestamp = <u32>::sse_decode(deserializer);
        let mut var_amountSat = <u64>::sse_decode(deserializer);
        let mut var_lastRefundTxId = <Option<String>>::sse_decode(deserializer);
        return crate::models::RefundableSwap {
            swap_address: var_swapAddress,
            timestamp: var_timestamp,
            amount_sat: var_amountSat,
            last_refund_tx_id: var_lastRefundTxId,
        };
    }
}

impl SseDecode for crate::models::RestoreRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_backupPath = <Option<String>>::sse_decode(deserializer);
        return crate::models::RestoreRequest {
            backup_path: var_backupPath,
        };
    }
}

impl SseDecode for crate::models::RouteHint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_hops = <Vec<crate::models::RouteHintHop>>::sse_decode(deserializer);
        return crate::models::RouteHint { hops: var_hops };
    }
}

impl SseDecode for crate::models::RouteHintHop {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_srcNodeId = <String>::sse_decode(deserializer);
        let mut var_shortChannelId = <String>::sse_decode(deserializer);
        let mut var_feesBaseMsat = <u32>::sse_decode(deserializer);
        let mut var_feesProportionalMillionths = <u32>::sse_decode(deserializer);
        let mut var_cltvExpiryDelta = <u64>::sse_decode(deserializer);
        let mut var_htlcMinimumMsat = <Option<u64>>::sse_decode(deserializer);
        let mut var_htlcMaximumMsat = <Option<u64>>::sse_decode(deserializer);
        return crate::models::RouteHintHop {
            src_node_id: var_srcNodeId,
            short_channel_id: var_shortChannelId,
            fees_base_msat: var_feesBaseMsat,
            fees_proportional_millionths: var_feesProportionalMillionths,
            cltv_expiry_delta: var_cltvExpiryDelta,
            htlc_minimum_msat: var_htlcMinimumMsat,
            htlc_maximum_msat: var_htlcMaximumMsat,
        };
    }
}

impl SseDecode for crate::errors::SdkError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::errors::SdkError::AlreadyStarted;
            }
            1 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::errors::SdkError::Generic { err: var_err };
            }
            2 => {
                return crate::errors::SdkError::NotStarted;
            }
            3 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::errors::SdkError::ServiceConnectivity { err: var_err };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::events::SdkEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_details = <crate::models::Payment>::sse_decode(deserializer);
                return crate::events::SdkEvent::PaymentFailed {
                    details: var_details,
                };
            }
            1 => {
                let mut var_details = <crate::models::Payment>::sse_decode(deserializer);
                return crate::events::SdkEvent::PaymentPending {
                    details: var_details,
                };
            }
            2 => {
                let mut var_details = <crate::models::Payment>::sse_decode(deserializer);
                return crate::events::SdkEvent::PaymentRefundable {
                    details: var_details,
                };
            }
            3 => {
                let mut var_details = <crate::models::Payment>::sse_decode(deserializer);
                return crate::events::SdkEvent::PaymentRefunded {
                    details: var_details,
                };
            }
            4 => {
                let mut var_details = <crate::models::Payment>::sse_decode(deserializer);
                return crate::events::SdkEvent::PaymentRefundPending {
                    details: var_details,
                };
            }
            5 => {
                let mut var_details = <crate::models::Payment>::sse_decode(deserializer);
                return crate::events::SdkEvent::PaymentSucceeded {
                    details: var_details,
                };
            }
            6 => {
                let mut var_details = <crate::models::Payment>::sse_decode(deserializer);
                return crate::events::SdkEvent::PaymentWaitingConfirmation {
                    details: var_details,
                };
            }
            7 => {
                let mut var_details = <crate::models::Payment>::sse_decode(deserializer);
                return crate::events::SdkEvent::PaymentWaitingFeeAcceptance {
                    details: var_details,
                };
            }
            8 => {
                return crate::events::SdkEvent::Synced;
            }
            9 => {
                let mut var_didPullNewRecords = <bool>::sse_decode(deserializer);
                return crate::events::SdkEvent::DataSynced {
                    did_pull_new_records: var_didPullNewRecords,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::SendDestination {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_addressData =
                    <crate::models::LiquidAddressData>::sse_decode(deserializer);
                let mut var_bip353Address = <Option<String>>::sse_decode(deserializer);
                return crate::models::SendDestination::LiquidAddress {
                    address_data: var_addressData,
                    bip353_address: var_bip353Address,
                };
            }
            1 => {
                let mut var_invoice = <crate::models::LNInvoice>::sse_decode(deserializer);
                let mut var_bip353Address = <Option<String>>::sse_decode(deserializer);
                return crate::models::SendDestination::Bolt11 {
                    invoice: var_invoice,
                    bip353_address: var_bip353Address,
                };
            }
            2 => {
                let mut var_offer = <crate::models::LNOffer>::sse_decode(deserializer);
                let mut var_receiverAmountSat = <u64>::sse_decode(deserializer);
                let mut var_bip353Address = <Option<String>>::sse_decode(deserializer);
                return crate::models::SendDestination::Bolt12 {
                    offer: var_offer,
                    receiver_amount_sat: var_receiverAmountSat,
                    bip353_address: var_bip353Address,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::SendPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_prepareResponse =
            <crate::models::PrepareSendResponse>::sse_decode(deserializer);
        let mut var_useAssetFees = <Option<bool>>::sse_decode(deserializer);
        let mut var_payerNote = <Option<String>>::sse_decode(deserializer);
        return crate::models::SendPaymentRequest {
            prepare_response: var_prepareResponse,
            use_asset_fees: var_useAssetFees,
            payer_note: var_payerNote,
        };
    }
}

impl SseDecode for crate::models::SendPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payment = <crate::models::Payment>::sse_decode(deserializer);
        return crate::models::SendPaymentResponse {
            payment: var_payment,
        };
    }
}

impl SseDecode for crate::models::SignMessageRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::models::SignMessageRequest {
            message: var_message,
        };
    }
}

impl SseDecode for crate::models::SignMessageResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_signature = <String>::sse_decode(deserializer);
        return crate::models::SignMessageResponse {
            signature: var_signature,
        };
    }
}

impl SseDecode for crate::models::SuccessAction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data = <crate::models::AesSuccessActionData>::sse_decode(deserializer);
                return crate::models::SuccessAction::Aes { data: var_data };
            }
            1 => {
                let mut var_data =
                    <crate::models::MessageSuccessActionData>::sse_decode(deserializer);
                return crate::models::SuccessAction::Message { data: var_data };
            }
            2 => {
                let mut var_data = <crate::models::UrlSuccessActionData>::sse_decode(deserializer);
                return crate::models::SuccessAction::Url { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::SuccessActionProcessed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_result =
                    <crate::models::AesSuccessActionDataResult>::sse_decode(deserializer);
                return crate::models::SuccessActionProcessed::Aes { result: var_result };
            }
            1 => {
                let mut var_data =
                    <crate::models::MessageSuccessActionData>::sse_decode(deserializer);
                return crate::models::SuccessActionProcessed::Message { data: var_data };
            }
            2 => {
                let mut var_data = <crate::models::UrlSuccessActionData>::sse_decode(deserializer);
                return crate::models::SuccessActionProcessed::Url { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::Symbol {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_grapheme = <Option<String>>::sse_decode(deserializer);
        let mut var_template = <Option<String>>::sse_decode(deserializer);
        let mut var_rtl = <Option<bool>>::sse_decode(deserializer);
        let mut var_position = <Option<u32>>::sse_decode(deserializer);
        return crate::models::Symbol {
            grapheme: var_grapheme,
            template: var_template,
            rtl: var_rtl,
            position: var_position,
        };
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::models::UrlSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_matchesCallbackDomain = <bool>::sse_decode(deserializer);
        return crate::models::UrlSuccessActionData {
            description: var_description,
            url: var_url,
            matches_callback_domain: var_matchesCallbackDomain,
        };
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::models::WalletInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_balanceSat = <u64>::sse_decode(deserializer);
        let mut var_pendingSendSat = <u64>::sse_decode(deserializer);
        let mut var_pendingReceiveSat = <u64>::sse_decode(deserializer);
        let mut var_fingerprint = <String>::sse_decode(deserializer);
        let mut var_pubkey = <String>::sse_decode(deserializer);
        let mut var_assetBalances = <Vec<crate::models::AssetBalance>>::sse_decode(deserializer);
        return crate::models::WalletInfo {
            balance_sat: var_balanceSat,
            pending_send_sat: var_pendingSendSat,
            pending_receive_sat: var_pendingReceiveSat,
            fingerprint: var_fingerprint,
            pubkey: var_pubkey,
            asset_balances: var_assetBalances,
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__sdk__BreezSdkLiquid_accept_payment_proposed_fees_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        2 => wire__crate__sdk__BreezSdkLiquid_add_event_listener_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        4 => wire__crate__sdk__BreezSdkLiquid_buy_bitcoin_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__sdk__BreezSdkLiquid_create_bolt12_invoice_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        7 => wire__crate__sdk__BreezSdkLiquid_disconnect_impl(port, ptr, rust_vec_len, data_len),
        9 => wire__crate__sdk__BreezSdkLiquid_fetch_fiat_rates_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        10 => wire__crate__sdk__BreezSdkLiquid_fetch_lightning_limits_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        11 => wire__crate__sdk__BreezSdkLiquid_fetch_onchain_limits_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        12 => wire__crate__sdk__BreezSdkLiquid_fetch_payment_proposed_fees_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        13 => wire__crate__sdk__BreezSdkLiquid_get_info_impl(port, ptr, rust_vec_len, data_len),
        14 => wire__crate__sdk__BreezSdkLiquid_get_payment_impl(port, ptr, rust_vec_len, data_len),
        15 => wire__crate__sdk__BreezSdkLiquid_list_fiat_currencies_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        16 => {
            wire__crate__sdk__BreezSdkLiquid_list_payments_impl(port, ptr, rust_vec_len, data_len)
        }
        17 => wire__crate__sdk__BreezSdkLiquid_list_refundables_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        18 => wire__crate__sdk__BreezSdkLiquid_lnurl_auth_impl(port, ptr, rust_vec_len, data_len),
        19 => wire__crate__sdk__BreezSdkLiquid_lnurl_pay_impl(port, ptr, rust_vec_len, data_len),
        20 => {
            wire__crate__sdk__BreezSdkLiquid_lnurl_withdraw_impl(port, ptr, rust_vec_len, data_len)
        }
        21 => wire__crate__sdk__BreezSdkLiquid_parse_impl(port, ptr, rust_vec_len, data_len),
        22 => wire__crate__sdk__BreezSdkLiquid_pay_onchain_impl(port, ptr, rust_vec_len, data_len),
        23 => wire__crate__sdk__BreezSdkLiquid_prepare_buy_bitcoin_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        24 => wire__crate__sdk__BreezSdkLiquid_prepare_lnurl_pay_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        25 => wire__crate__sdk__BreezSdkLiquid_prepare_pay_onchain_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        26 => wire__crate__sdk__BreezSdkLiquid_prepare_receive_payment_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        27 => {
            wire__crate__sdk__BreezSdkLiquid_prepare_refund_impl(port, ptr, rust_vec_len, data_len)
        }
        28 => wire__crate__sdk__BreezSdkLiquid_prepare_send_payment_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        29 => {
            wire__crate__sdk__BreezSdkLiquid_receive_payment_impl(port, ptr, rust_vec_len, data_len)
        }
        30 => wire__crate__sdk__BreezSdkLiquid_recommended_fees_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        31 => wire__crate__sdk__BreezSdkLiquid_refund_impl(port, ptr, rust_vec_len, data_len),
        32 => wire__crate__sdk__BreezSdkLiquid_register_webhook_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        33 => wire__crate__sdk__BreezSdkLiquid_rescan_onchain_swaps_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        35 => wire__crate__sdk__BreezSdkLiquid_send_payment_impl(port, ptr, rust_vec_len, data_len),
        37 => wire__crate__sdk__BreezSdkLiquid_sync_impl(port, ptr, rust_vec_len, data_len),
        38 => wire__crate__sdk__BreezSdkLiquid_unregister_webhook_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        39 => wire__crate__logger__breez_log_stream_impl(port, ptr, rust_vec_len, data_len),
        40 => wire__crate__sdk__connect_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        3 => wire__crate__sdk__BreezSdkLiquid_backup_impl(ptr, rust_vec_len, data_len),
        5 => wire__crate__sdk__BreezSdkLiquid_check_message_impl(ptr, rust_vec_len, data_len),
        8 => wire__crate__sdk__BreezSdkLiquid_empty_wallet_cache_impl(ptr, rust_vec_len, data_len),
        34 => wire__crate__sdk__BreezSdkLiquid_restore_impl(ptr, rust_vec_len, data_len),
        36 => wire__crate__sdk__BreezSdkLiquid_sign_message_impl(ptr, rust_vec_len, data_len),
        41 => wire__crate__sdk__default_config_impl(ptr, rust_vec_len, data_len),
        42 => wire__crate__sdk__parse_invoice_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<BreezSdkLiquid> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<BreezSdkLiquid> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<BreezSdkLiquid>> for BreezSdkLiquid {
    fn into_into_dart(self) -> FrbWrapper<BreezSdkLiquid> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::AcceptPaymentProposedFeesRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.response.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::AcceptPaymentProposedFeesRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::AcceptPaymentProposedFeesRequest>>
    for crate::models::AcceptPaymentProposedFeesRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::AcceptPaymentProposedFeesRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::AesSuccessActionData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.description.into_into_dart().into_dart(),
            self.0.ciphertext.into_into_dart().into_dart(),
            self.0.iv.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::AesSuccessActionData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::AesSuccessActionData>>
    for crate::models::AesSuccessActionData
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::AesSuccessActionData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::AesSuccessActionDataDecrypted> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.description.into_into_dart().into_dart(),
            self.0.plaintext.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::AesSuccessActionDataDecrypted>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::AesSuccessActionDataDecrypted>>
    for crate::models::AesSuccessActionDataDecrypted
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::AesSuccessActionDataDecrypted> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::AesSuccessActionDataResult> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::AesSuccessActionDataResult::Decrypted { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::models::AesSuccessActionDataResult::ErrorStatus { reason } => {
                [1.into_dart(), reason.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::AesSuccessActionDataResult>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::AesSuccessActionDataResult>>
    for crate::models::AesSuccessActionDataResult
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::AesSuccessActionDataResult> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::Amount> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::Amount::Bitcoin { amount_msat } => {
                [0.into_dart(), amount_msat.into_into_dart().into_dart()].into_dart()
            }
            crate::models::Amount::Currency {
                iso4217_code,
                fractional_amount,
            } => [
                1.into_dart(),
                iso4217_code.into_into_dart().into_dart(),
                fractional_amount.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::Amount>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::Amount>>
    for crate::models::Amount
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::Amount> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::AssetBalance> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.asset_id.into_into_dart().into_dart(),
            self.0.balance_sat.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.ticker.into_into_dart().into_dart(),
            self.0.balance.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::AssetBalance>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::AssetBalance>>
    for crate::models::AssetBalance
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::AssetBalance> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::AssetInfo> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.name.into_into_dart().into_dart(),
            self.0.ticker.into_into_dart().into_dart(),
            self.0.amount.into_into_dart().into_dart(),
            self.0.fees.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::AssetInfo>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::AssetInfo>>
    for crate::models::AssetInfo
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::AssetInfo> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::AssetMetadata> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.asset_id.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
            self.0.ticker.into_into_dart().into_dart(),
            self.0.precision.into_into_dart().into_dart(),
            self.0.fiat_id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::AssetMetadata>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::AssetMetadata>>
    for crate::models::AssetMetadata
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::AssetMetadata> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::BackupRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.backup_path.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::BackupRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::BackupRequest>>
    for crate::models::BackupRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::BackupRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::BitcoinAddressData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.address.into_into_dart().into_dart(),
            self.0.network.into_into_dart().into_dart(),
            self.0.amount_sat.into_into_dart().into_dart(),
            self.0.label.into_into_dart().into_dart(),
            self.0.message.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::BitcoinAddressData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::BitcoinAddressData>>
    for crate::models::BitcoinAddressData
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::BitcoinAddressData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::BlockchainExplorer> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::BlockchainExplorer::Electrum { url } => {
                [0.into_dart(), url.into_into_dart().into_dart()].into_dart()
            }
            crate::models::BlockchainExplorer::Esplora {
                url,
                use_waterfalls,
            } => [
                1.into_dart(),
                url.into_into_dart().into_dart(),
                use_waterfalls.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::BlockchainExplorer>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::BlockchainExplorer>>
    for crate::models::BlockchainExplorer
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::BlockchainExplorer> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::BlockchainInfo> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.liquid_tip.into_into_dart().into_dart(),
            self.0.bitcoin_tip.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::BlockchainInfo>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::BlockchainInfo>>
    for crate::models::BlockchainInfo
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::BlockchainInfo> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::BuyBitcoinProvider> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::BuyBitcoinProvider::Moonpay => 0.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::BuyBitcoinProvider>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::BuyBitcoinProvider>>
    for crate::models::BuyBitcoinProvider
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::BuyBitcoinProvider> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::BuyBitcoinRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.prepare_response.into_into_dart().into_dart(),
            self.0.redirect_url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::BuyBitcoinRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::BuyBitcoinRequest>>
    for crate::models::BuyBitcoinRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::BuyBitcoinRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::CheckMessageRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.message.into_into_dart().into_dart(),
            self.0.pubkey.into_into_dart().into_dart(),
            self.0.signature.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::CheckMessageRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::CheckMessageRequest>>
    for crate::models::CheckMessageRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::CheckMessageRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::CheckMessageResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.is_valid.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::CheckMessageResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::CheckMessageResponse>>
    for crate::models::CheckMessageResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::CheckMessageResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::Config> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.liquid_explorer.into_into_dart().into_dart(),
            self.0.bitcoin_explorer.into_into_dart().into_dart(),
            self.0.working_dir.into_into_dart().into_dart(),
            self.0.network.into_into_dart().into_dart(),
            self.0.payment_timeout_sec.into_into_dart().into_dart(),
            self.0.sync_service_url.into_into_dart().into_dart(),
            self.0.zero_conf_max_amount_sat.into_into_dart().into_dart(),
            self.0.breez_api_key.into_into_dart().into_dart(),
            self.0.external_input_parsers.into_into_dart().into_dart(),
            self.0
                .use_default_external_input_parsers
                .into_into_dart()
                .into_dart(),
            self.0
                .onchain_fee_rate_leeway_sat
                .into_into_dart()
                .into_dart(),
            self.0.asset_metadata.into_into_dart().into_dart(),
            self.0.sideswap_api_key.into_into_dart().into_dart(),
            self.0.use_magic_routing_hints.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::Config>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::Config>>
    for crate::models::Config
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::Config> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::ConnectRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.config.into_into_dart().into_dart(),
            self.0.mnemonic.into_into_dart().into_dart(),
            self.0.passphrase.into_into_dart().into_dart(),
            self.0.seed.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::ConnectRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::ConnectRequest>>
    for crate::models::ConnectRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::ConnectRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::CreateBolt12InvoiceRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.offer.into_into_dart().into_dart(),
            self.0.invoice_request.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::CreateBolt12InvoiceRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::CreateBolt12InvoiceRequest>>
    for crate::models::CreateBolt12InvoiceRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::CreateBolt12InvoiceRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::CreateBolt12InvoiceResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.invoice.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::CreateBolt12InvoiceResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::CreateBolt12InvoiceResponse>>
    for crate::models::CreateBolt12InvoiceResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::CreateBolt12InvoiceResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::CurrencyInfo> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.name.into_into_dart().into_dart(),
            self.0.fraction_size.into_into_dart().into_dart(),
            self.0.spacing.into_into_dart().into_dart(),
            self.0.symbol.into_into_dart().into_dart(),
            self.0.uniq_symbol.into_into_dart().into_dart(),
            self.0.localized_name.into_into_dart().into_dart(),
            self.0.locale_overrides.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::CurrencyInfo>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::CurrencyInfo>>
    for crate::models::CurrencyInfo
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::CurrencyInfo> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::ExternalInputParser> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.provider_id.into_into_dart().into_dart(),
            self.0.input_regex.into_into_dart().into_dart(),
            self.0.parser_url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::ExternalInputParser>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::ExternalInputParser>>
    for crate::models::ExternalInputParser
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::ExternalInputParser> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::FetchPaymentProposedFeesRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.swap_id.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::FetchPaymentProposedFeesRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::FetchPaymentProposedFeesRequest>>
    for crate::models::FetchPaymentProposedFeesRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::FetchPaymentProposedFeesRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::FetchPaymentProposedFeesResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.swap_id.into_into_dart().into_dart(),
            self.0.fees_sat.into_into_dart().into_dart(),
            self.0.payer_amount_sat.into_into_dart().into_dart(),
            self.0.receiver_amount_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::FetchPaymentProposedFeesResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::FetchPaymentProposedFeesResponse>>
    for crate::models::FetchPaymentProposedFeesResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::FetchPaymentProposedFeesResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::FiatCurrency> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.id.into_into_dart().into_dart(),
            self.0.info.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::FiatCurrency>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::FiatCurrency>>
    for crate::models::FiatCurrency
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::FiatCurrency> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::GetInfoResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.wallet_info.into_into_dart().into_dart(),
            self.0.blockchain_info.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::GetInfoResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::GetInfoResponse>>
    for crate::models::GetInfoResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::GetInfoResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::GetPaymentRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::GetPaymentRequest::PaymentHash { payment_hash } => {
                [0.into_dart(), payment_hash.into_into_dart().into_dart()].into_dart()
            }
            crate::models::GetPaymentRequest::SwapId { swap_id } => {
                [1.into_dart(), swap_id.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::GetPaymentRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::GetPaymentRequest>>
    for crate::models::GetPaymentRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::GetPaymentRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::InputType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::InputType::BitcoinAddress { address } => {
                [0.into_dart(), address.into_into_dart().into_dart()].into_dart()
            }
            crate::models::InputType::LiquidAddress { address } => {
                [1.into_dart(), address.into_into_dart().into_dart()].into_dart()
            }
            crate::models::InputType::Bolt11 { invoice } => {
                [2.into_dart(), invoice.into_into_dart().into_dart()].into_dart()
            }
            crate::models::InputType::Bolt12Offer {
                offer,
                bip353_address,
            } => [
                3.into_dart(),
                offer.into_into_dart().into_dart(),
                bip353_address.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::models::InputType::NodeId { node_id } => {
                [4.into_dart(), node_id.into_into_dart().into_dart()].into_dart()
            }
            crate::models::InputType::Url { url } => {
                [5.into_dart(), url.into_into_dart().into_dart()].into_dart()
            }
            crate::models::InputType::LnUrlPay {
                data,
                bip353_address,
            } => [
                6.into_dart(),
                data.into_into_dart().into_dart(),
                bip353_address.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::models::InputType::LnUrlWithdraw { data } => {
                [7.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::models::InputType::LnUrlAuth { data } => {
                [8.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::models::InputType::LnUrlError { data } => {
                [9.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::InputType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::InputType>>
    for crate::models::InputType
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::InputType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LightningPaymentLimitsResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.send.into_into_dart().into_dart(),
            self.0.receive.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LightningPaymentLimitsResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LightningPaymentLimitsResponse>>
    for crate::models::LightningPaymentLimitsResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LightningPaymentLimitsResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::Limits> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.min_sat.into_into_dart().into_dart(),
            self.0.max_sat.into_into_dart().into_dart(),
            self.0.max_zero_conf_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::Limits>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::Limits>>
    for crate::models::Limits
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::Limits> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LiquidAddressData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.address.into_into_dart().into_dart(),
            self.0.network.into_into_dart().into_dart(),
            self.0.asset_id.into_into_dart().into_dart(),
            self.0.amount.into_into_dart().into_dart(),
            self.0.amount_sat.into_into_dart().into_dart(),
            self.0.label.into_into_dart().into_dart(),
            self.0.message.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LiquidAddressData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LiquidAddressData>>
    for crate::models::LiquidAddressData
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LiquidAddressData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LiquidNetwork> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::LiquidNetwork::Mainnet => 0.into_dart(),
            crate::models::LiquidNetwork::Testnet => 1.into_dart(),
            crate::models::LiquidNetwork::Regtest => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LiquidNetwork>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LiquidNetwork>>
    for crate::models::LiquidNetwork
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LiquidNetwork> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::ListPaymentDetails> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::ListPaymentDetails::Liquid {
                asset_id,
                destination,
            } => [
                0.into_dart(),
                asset_id.into_into_dart().into_dart(),
                destination.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::models::ListPaymentDetails::Bitcoin { address } => {
                [1.into_dart(), address.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::ListPaymentDetails>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::ListPaymentDetails>>
    for crate::models::ListPaymentDetails
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::ListPaymentDetails> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::ListPaymentsRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.filters.into_into_dart().into_dart(),
            self.0.states.into_into_dart().into_dart(),
            self.0.from_timestamp.into_into_dart().into_dart(),
            self.0.to_timestamp.into_into_dart().into_dart(),
            self.0.offset.into_into_dart().into_dart(),
            self.0.limit.into_into_dart().into_dart(),
            self.0.details.into_into_dart().into_dart(),
            self.0.sort_ascending.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::ListPaymentsRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::ListPaymentsRequest>>
    for crate::models::ListPaymentsRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::ListPaymentsRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LNInvoice> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.bolt11.into_into_dart().into_dart(),
            self.0.network.into_into_dart().into_dart(),
            self.0.payee_pubkey.into_into_dart().into_dart(),
            self.0.payment_hash.into_into_dart().into_dart(),
            self.0.description.into_into_dart().into_dart(),
            self.0.description_hash.into_into_dart().into_dart(),
            self.0.amount_msat.into_into_dart().into_dart(),
            self.0.timestamp.into_into_dart().into_dart(),
            self.0.expiry.into_into_dart().into_dart(),
            self.0.routing_hints.into_into_dart().into_dart(),
            self.0.payment_secret.into_into_dart().into_dart(),
            self.0
                .min_final_cltv_expiry_delta
                .into_into_dart()
                .into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LNInvoice>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LNInvoice>>
    for crate::models::LNInvoice
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LNInvoice> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LNOffer> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.offer.into_into_dart().into_dart(),
            self.0.chains.into_into_dart().into_dart(),
            self.0.min_amount.into_into_dart().into_dart(),
            self.0.description.into_into_dart().into_dart(),
            self.0.absolute_expiry.into_into_dart().into_dart(),
            self.0.issuer.into_into_dart().into_dart(),
            self.0.signing_pubkey.into_into_dart().into_dart(),
            self.0.paths.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LNOffer>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LNOffer>>
    for crate::models::LNOffer
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LNOffer> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LnOfferBlindedPath> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.blinded_hops.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LnOfferBlindedPath>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LnOfferBlindedPath>>
    for crate::models::LnOfferBlindedPath
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LnOfferBlindedPath> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::duplicates::LnUrlAuthError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::duplicates::LnUrlAuthError::Generic { err } => {
                [0.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlAuthError::InvalidUri { err } => {
                [1.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlAuthError::ServiceConnectivity { err } => {
                [2.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::duplicates::LnUrlAuthError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::duplicates::LnUrlAuthError>
    for crate::duplicates::LnUrlAuthError
{
    fn into_into_dart(self) -> crate::duplicates::LnUrlAuthError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LnUrlAuthRequestData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.k1.into_into_dart().into_dart(),
            self.0.action.into_into_dart().into_dart(),
            self.0.domain.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LnUrlAuthRequestData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LnUrlAuthRequestData>>
    for crate::models::LnUrlAuthRequestData
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LnUrlAuthRequestData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::duplicates::LnUrlCallbackStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::duplicates::LnUrlCallbackStatus::Ok => [0.into_dart()].into_dart(),
            crate::duplicates::LnUrlCallbackStatus::ErrorStatus { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::duplicates::LnUrlCallbackStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::duplicates::LnUrlCallbackStatus>
    for crate::duplicates::LnUrlCallbackStatus
{
    fn into_into_dart(self) -> crate::duplicates::LnUrlCallbackStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LnUrlErrorData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.reason.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LnUrlErrorData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LnUrlErrorData>>
    for crate::models::LnUrlErrorData
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LnUrlErrorData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LnUrlInfo> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.ln_address.into_into_dart().into_dart(),
            self.0.lnurl_pay_comment.into_into_dart().into_dart(),
            self.0.lnurl_pay_domain.into_into_dart().into_dart(),
            self.0.lnurl_pay_metadata.into_into_dart().into_dart(),
            self.0.lnurl_pay_success_action.into_into_dart().into_dart(),
            self.0
                .lnurl_pay_unprocessed_success_action
                .into_into_dart()
                .into_dart(),
            self.0.lnurl_withdraw_endpoint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LnUrlInfo>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LnUrlInfo>>
    for crate::models::LnUrlInfo
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LnUrlInfo> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::duplicates::LnUrlPayError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::duplicates::LnUrlPayError::AlreadyPaid => [0.into_dart()].into_dart(),
            crate::duplicates::LnUrlPayError::Generic { err } => {
                [1.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlPayError::InsufficientBalance { err } => {
                [2.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlPayError::InvalidAmount { err } => {
                [3.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlPayError::InvalidInvoice { err } => {
                [4.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlPayError::InvalidNetwork { err } => {
                [5.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlPayError::InvalidUri { err } => {
                [6.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlPayError::InvoiceExpired { err } => {
                [7.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlPayError::PaymentFailed { err } => {
                [8.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlPayError::PaymentTimeout { err } => {
                [9.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlPayError::RouteNotFound { err } => {
                [10.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlPayError::RouteTooExpensive { err } => {
                [11.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlPayError::ServiceConnectivity { err } => {
                [12.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::duplicates::LnUrlPayError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::duplicates::LnUrlPayError>
    for crate::duplicates::LnUrlPayError
{
    fn into_into_dart(self) -> crate::duplicates::LnUrlPayError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LnUrlPayErrorData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.payment_hash.into_into_dart().into_dart(),
            self.0.reason.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LnUrlPayErrorData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LnUrlPayErrorData>>
    for crate::models::LnUrlPayErrorData
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LnUrlPayErrorData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LnUrlPayRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.prepare_response.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LnUrlPayRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LnUrlPayRequest>>
    for crate::models::LnUrlPayRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LnUrlPayRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LnUrlPayRequestData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.callback.into_into_dart().into_dart(),
            self.0.min_sendable.into_into_dart().into_dart(),
            self.0.max_sendable.into_into_dart().into_dart(),
            self.0.metadata_str.into_into_dart().into_dart(),
            self.0.comment_allowed.into_into_dart().into_dart(),
            self.0.domain.into_into_dart().into_dart(),
            self.0.allows_nostr.into_into_dart().into_dart(),
            self.0.nostr_pubkey.into_into_dart().into_dart(),
            self.0.ln_address.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LnUrlPayRequestData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LnUrlPayRequestData>>
    for crate::models::LnUrlPayRequestData
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LnUrlPayRequestData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LnUrlPayResult> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::LnUrlPayResult::EndpointSuccess { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::models::LnUrlPayResult::EndpointError { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::models::LnUrlPayResult::PayError { data } => {
                [2.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LnUrlPayResult>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LnUrlPayResult>>
    for crate::models::LnUrlPayResult
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LnUrlPayResult> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LnUrlPaySuccessData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.payment.into_into_dart().into_dart(),
            self.0.success_action.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LnUrlPaySuccessData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LnUrlPaySuccessData>>
    for crate::models::LnUrlPaySuccessData
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LnUrlPaySuccessData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::duplicates::LnUrlWithdrawError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::duplicates::LnUrlWithdrawError::Generic { err } => {
                [0.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlWithdrawError::InvalidAmount { err } => {
                [1.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlWithdrawError::InvalidInvoice { err } => {
                [2.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlWithdrawError::InvalidUri { err } => {
                [3.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlWithdrawError::InvoiceNoRoutingHints { err } => {
                [4.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlWithdrawError::ServiceConnectivity { err } => {
                [5.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::duplicates::LnUrlWithdrawError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::duplicates::LnUrlWithdrawError>
    for crate::duplicates::LnUrlWithdrawError
{
    fn into_into_dart(self) -> crate::duplicates::LnUrlWithdrawError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LnUrlWithdrawRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.data.into_into_dart().into_dart(),
            self.0.amount_msat.into_into_dart().into_dart(),
            self.0.description.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LnUrlWithdrawRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LnUrlWithdrawRequest>>
    for crate::models::LnUrlWithdrawRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LnUrlWithdrawRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LnUrlWithdrawRequestData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.callback.into_into_dart().into_dart(),
            self.0.k1.into_into_dart().into_dart(),
            self.0.default_description.into_into_dart().into_dart(),
            self.0.min_withdrawable.into_into_dart().into_dart(),
            self.0.max_withdrawable.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LnUrlWithdrawRequestData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LnUrlWithdrawRequestData>>
    for crate::models::LnUrlWithdrawRequestData
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LnUrlWithdrawRequestData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::duplicates::LnUrlWithdrawResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::duplicates::LnUrlWithdrawResult::Ok { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlWithdrawResult::Timeout { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::duplicates::LnUrlWithdrawResult::ErrorStatus { data } => {
                [2.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::duplicates::LnUrlWithdrawResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::duplicates::LnUrlWithdrawResult>
    for crate::duplicates::LnUrlWithdrawResult
{
    fn into_into_dart(self) -> crate::duplicates::LnUrlWithdrawResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::duplicates::LnUrlWithdrawSuccessData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.invoice.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::duplicates::LnUrlWithdrawSuccessData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::duplicates::LnUrlWithdrawSuccessData>
    for crate::duplicates::LnUrlWithdrawSuccessData
{
    fn into_into_dart(self) -> crate::duplicates::LnUrlWithdrawSuccessData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LocaleOverrides> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.locale.into_into_dart().into_dart(),
            self.0.spacing.into_into_dart().into_dart(),
            self.0.symbol.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LocaleOverrides>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LocaleOverrides>>
    for crate::models::LocaleOverrides
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LocaleOverrides> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::LocalizedName> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.locale.into_into_dart().into_dart(),
            self.0.name.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::LocalizedName>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::LocalizedName>>
    for crate::models::LocalizedName
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::LocalizedName> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::logger::LogEntry> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.line.into_into_dart().into_dart(),
            self.0.level.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::logger::LogEntry>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::logger::LogEntry>>
    for crate::logger::LogEntry
{
    fn into_into_dart(self) -> FrbWrapper<crate::logger::LogEntry> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::MessageSuccessActionData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::MessageSuccessActionData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::MessageSuccessActionData>>
    for crate::models::MessageSuccessActionData
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::MessageSuccessActionData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::Network> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::Network::Bitcoin => 0.into_dart(),
            crate::models::Network::Testnet => 1.into_dart(),
            crate::models::Network::Signet => 2.into_dart(),
            crate::models::Network::Regtest => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::Network>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::Network>>
    for crate::models::Network
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::Network> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::OnchainPaymentLimitsResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.send.into_into_dart().into_dart(),
            self.0.receive.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::OnchainPaymentLimitsResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::OnchainPaymentLimitsResponse>>
    for crate::models::OnchainPaymentLimitsResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::OnchainPaymentLimitsResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PayAmount> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::PayAmount::Bitcoin {
                receiver_amount_sat,
            } => [
                0.into_dart(),
                receiver_amount_sat.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::models::PayAmount::Asset {
                to_asset,
                receiver_amount,
                estimate_asset_fees,
                from_asset,
            } => [
                1.into_dart(),
                to_asset.into_into_dart().into_dart(),
                receiver_amount.into_into_dart().into_dart(),
                estimate_asset_fees.into_into_dart().into_dart(),
                from_asset.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::models::PayAmount::Drain => [2.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PayAmount>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PayAmount>>
    for crate::models::PayAmount
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PayAmount> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PayOnchainRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.address.into_into_dart().into_dart(),
            self.0.prepare_response.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PayOnchainRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PayOnchainRequest>>
    for crate::models::PayOnchainRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PayOnchainRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::Payment> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.destination.into_into_dart().into_dart(),
            self.0.tx_id.into_into_dart().into_dart(),
            self.0.unblinding_data.into_into_dart().into_dart(),
            self.0.timestamp.into_into_dart().into_dart(),
            self.0.amount_sat.into_into_dart().into_dart(),
            self.0.fees_sat.into_into_dart().into_dart(),
            self.0.swapper_fees_sat.into_into_dart().into_dart(),
            self.0.payment_type.into_into_dart().into_dart(),
            self.0.status.into_into_dart().into_dart(),
            self.0.details.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::Payment>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::Payment>>
    for crate::models::Payment
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::Payment> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PaymentDetails> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::PaymentDetails::Lightning {
                swap_id,
                description,
                liquid_expiration_blockheight,
                preimage,
                invoice,
                bolt12_offer,
                payment_hash,
                destination_pubkey,
                lnurl_info,
                bip353_address,
                payer_note,
                claim_tx_id,
                refund_tx_id,
                refund_tx_amount_sat,
            } => [
                0.into_dart(),
                swap_id.into_into_dart().into_dart(),
                description.into_into_dart().into_dart(),
                liquid_expiration_blockheight.into_into_dart().into_dart(),
                preimage.into_into_dart().into_dart(),
                invoice.into_into_dart().into_dart(),
                bolt12_offer.into_into_dart().into_dart(),
                payment_hash.into_into_dart().into_dart(),
                destination_pubkey.into_into_dart().into_dart(),
                lnurl_info.into_into_dart().into_dart(),
                bip353_address.into_into_dart().into_dart(),
                payer_note.into_into_dart().into_dart(),
                claim_tx_id.into_into_dart().into_dart(),
                refund_tx_id.into_into_dart().into_dart(),
                refund_tx_amount_sat.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::models::PaymentDetails::Liquid {
                destination,
                description,
                asset_id,
                asset_info,
                lnurl_info,
                bip353_address,
                payer_note,
            } => [
                1.into_dart(),
                destination.into_into_dart().into_dart(),
                description.into_into_dart().into_dart(),
                asset_id.into_into_dart().into_dart(),
                asset_info.into_into_dart().into_dart(),
                lnurl_info.into_into_dart().into_dart(),
                bip353_address.into_into_dart().into_dart(),
                payer_note.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::models::PaymentDetails::Bitcoin {
                swap_id,
                bitcoin_address,
                description,
                auto_accepted_fees,
                liquid_expiration_blockheight,
                bitcoin_expiration_blockheight,
                lockup_tx_id,
                claim_tx_id,
                refund_tx_id,
                refund_tx_amount_sat,
            } => [
                2.into_dart(),
                swap_id.into_into_dart().into_dart(),
                bitcoin_address.into_into_dart().into_dart(),
                description.into_into_dart().into_dart(),
                auto_accepted_fees.into_into_dart().into_dart(),
                liquid_expiration_blockheight.into_into_dart().into_dart(),
                bitcoin_expiration_blockheight.into_into_dart().into_dart(),
                lockup_tx_id.into_into_dart().into_dart(),
                claim_tx_id.into_into_dart().into_dart(),
                refund_tx_id.into_into_dart().into_dart(),
                refund_tx_amount_sat.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PaymentDetails>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PaymentDetails>>
    for crate::models::PaymentDetails
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PaymentDetails> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::errors::PaymentError> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::errors::PaymentError::AlreadyClaimed => [0.into_dart()].into_dart(),
            crate::errors::PaymentError::AlreadyPaid => [1.into_dart()].into_dart(),
            crate::errors::PaymentError::PaymentInProgress => [2.into_dart()].into_dart(),
            crate::errors::PaymentError::AmountOutOfRange { min, max } => [
                3.into_dart(),
                min.into_into_dart().into_dart(),
                max.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::errors::PaymentError::AmountMissing { err } => {
                [4.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::errors::PaymentError::AssetError { err } => {
                [5.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::errors::PaymentError::InvalidNetwork { err } => {
                [6.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::errors::PaymentError::Generic { err } => {
                [7.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::errors::PaymentError::InvalidOrExpiredFees => [8.into_dart()].into_dart(),
            crate::errors::PaymentError::InsufficientFunds => [9.into_dart()].into_dart(),
            crate::errors::PaymentError::InvalidDescription { err } => {
                [10.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::errors::PaymentError::InvalidInvoice { err } => {
                [11.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::errors::PaymentError::InvalidPreimage => [12.into_dart()].into_dart(),
            crate::errors::PaymentError::PairsNotFound => [13.into_dart()].into_dart(),
            crate::errors::PaymentError::PaymentTimeout => [14.into_dart()].into_dart(),
            crate::errors::PaymentError::PersistError => [15.into_dart()].into_dart(),
            crate::errors::PaymentError::ReceiveError { err } => {
                [16.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::errors::PaymentError::Refunded { err, refund_tx_id } => [
                17.into_dart(),
                err.into_into_dart().into_dart(),
                refund_tx_id.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::errors::PaymentError::SelfTransferNotSupported => [18.into_dart()].into_dart(),
            crate::errors::PaymentError::SendError { err } => {
                [19.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::errors::PaymentError::SignerError { err } => {
                [20.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::errors::PaymentError>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::errors::PaymentError>>
    for crate::errors::PaymentError
{
    fn into_into_dart(self) -> FrbWrapper<crate::errors::PaymentError> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PaymentMethod> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::PaymentMethod::Lightning => 0.into_dart(),
            crate::models::PaymentMethod::Bolt11Invoice => 1.into_dart(),
            crate::models::PaymentMethod::Bolt12Offer => 2.into_dart(),
            crate::models::PaymentMethod::BitcoinAddress => 3.into_dart(),
            crate::models::PaymentMethod::LiquidAddress => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PaymentMethod>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PaymentMethod>>
    for crate::models::PaymentMethod
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PaymentMethod> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PaymentState> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::PaymentState::Created => 0.into_dart(),
            crate::models::PaymentState::Pending => 1.into_dart(),
            crate::models::PaymentState::Complete => 2.into_dart(),
            crate::models::PaymentState::Failed => 3.into_dart(),
            crate::models::PaymentState::TimedOut => 4.into_dart(),
            crate::models::PaymentState::Refundable => 5.into_dart(),
            crate::models::PaymentState::RefundPending => 6.into_dart(),
            crate::models::PaymentState::WaitingFeeAcceptance => 7.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PaymentState>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PaymentState>>
    for crate::models::PaymentState
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PaymentState> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PaymentType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::PaymentType::Receive => 0.into_dart(),
            crate::models::PaymentType::Send => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PaymentType>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PaymentType>>
    for crate::models::PaymentType
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PaymentType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PrepareBuyBitcoinRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.provider.into_into_dart().into_dart(),
            self.0.amount_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PrepareBuyBitcoinRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PrepareBuyBitcoinRequest>>
    for crate::models::PrepareBuyBitcoinRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PrepareBuyBitcoinRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PrepareBuyBitcoinResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.provider.into_into_dart().into_dart(),
            self.0.amount_sat.into_into_dart().into_dart(),
            self.0.fees_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PrepareBuyBitcoinResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PrepareBuyBitcoinResponse>>
    for crate::models::PrepareBuyBitcoinResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PrepareBuyBitcoinResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PrepareLnUrlPayRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.data.into_into_dart().into_dart(),
            self.0.amount.into_into_dart().into_dart(),
            self.0.bip353_address.into_into_dart().into_dart(),
            self.0.comment.into_into_dart().into_dart(),
            self.0
                .validate_success_action_url
                .into_into_dart()
                .into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PrepareLnUrlPayRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PrepareLnUrlPayRequest>>
    for crate::models::PrepareLnUrlPayRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PrepareLnUrlPayRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PrepareLnUrlPayResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.destination.into_into_dart().into_dart(),
            self.0.fees_sat.into_into_dart().into_dart(),
            self.0.data.into_into_dart().into_dart(),
            self.0.amount.into_into_dart().into_dart(),
            self.0.comment.into_into_dart().into_dart(),
            self.0.success_action.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PrepareLnUrlPayResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PrepareLnUrlPayResponse>>
    for crate::models::PrepareLnUrlPayResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PrepareLnUrlPayResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PreparePayOnchainRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.amount.into_into_dart().into_dart(),
            self.0.fee_rate_sat_per_vbyte.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PreparePayOnchainRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PreparePayOnchainRequest>>
    for crate::models::PreparePayOnchainRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PreparePayOnchainRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PreparePayOnchainResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.receiver_amount_sat.into_into_dart().into_dart(),
            self.0.claim_fees_sat.into_into_dart().into_dart(),
            self.0.total_fees_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PreparePayOnchainResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PreparePayOnchainResponse>>
    for crate::models::PreparePayOnchainResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PreparePayOnchainResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PrepareReceiveRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.payment_method.into_into_dart().into_dart(),
            self.0.amount.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PrepareReceiveRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PrepareReceiveRequest>>
    for crate::models::PrepareReceiveRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PrepareReceiveRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PrepareReceiveResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.payment_method.into_into_dart().into_dart(),
            self.0.fees_sat.into_into_dart().into_dart(),
            self.0.amount.into_into_dart().into_dart(),
            self.0.min_payer_amount_sat.into_into_dart().into_dart(),
            self.0.max_payer_amount_sat.into_into_dart().into_dart(),
            self.0.swapper_feerate.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PrepareReceiveResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PrepareReceiveResponse>>
    for crate::models::PrepareReceiveResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PrepareReceiveResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PrepareRefundRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.swap_address.into_into_dart().into_dart(),
            self.0.refund_address.into_into_dart().into_dart(),
            self.0.fee_rate_sat_per_vbyte.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PrepareRefundRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PrepareRefundRequest>>
    for crate::models::PrepareRefundRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PrepareRefundRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PrepareRefundResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.tx_vsize.into_into_dart().into_dart(),
            self.0.tx_fee_sat.into_into_dart().into_dart(),
            self.0.last_refund_tx_id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PrepareRefundResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PrepareRefundResponse>>
    for crate::models::PrepareRefundResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PrepareRefundResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PrepareSendRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.destination.into_into_dart().into_dart(),
            self.0.amount.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PrepareSendRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PrepareSendRequest>>
    for crate::models::PrepareSendRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PrepareSendRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::PrepareSendResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.destination.into_into_dart().into_dart(),
            self.0.amount.into_into_dart().into_dart(),
            self.0.fees_sat.into_into_dart().into_dart(),
            self.0.estimated_asset_fees.into_into_dart().into_dart(),
            self.0.exchange_amount_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::PrepareSendResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::PrepareSendResponse>>
    for crate::models::PrepareSendResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::PrepareSendResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::Rate> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.coin.into_into_dart().into_dart(),
            self.0.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::Rate>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::Rate>> for crate::models::Rate {
    fn into_into_dart(self) -> FrbWrapper<crate::models::Rate> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::ReceiveAmount> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::ReceiveAmount::Bitcoin { payer_amount_sat } => {
                [0.into_dart(), payer_amount_sat.into_into_dart().into_dart()].into_dart()
            }
            crate::models::ReceiveAmount::Asset {
                asset_id,
                payer_amount,
            } => [
                1.into_dart(),
                asset_id.into_into_dart().into_dart(),
                payer_amount.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::ReceiveAmount>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::ReceiveAmount>>
    for crate::models::ReceiveAmount
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::ReceiveAmount> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::ReceivePaymentRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.prepare_response.into_into_dart().into_dart(),
            self.0.description.into_into_dart().into_dart(),
            self.0.use_description_hash.into_into_dart().into_dart(),
            self.0.payer_note.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::ReceivePaymentRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::ReceivePaymentRequest>>
    for crate::models::ReceivePaymentRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::ReceivePaymentRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::ReceivePaymentResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.destination.into_into_dart().into_dart(),
            self.0
                .liquid_expiration_blockheight
                .into_into_dart()
                .into_dart(),
            self.0
                .bitcoin_expiration_blockheight
                .into_into_dart()
                .into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::ReceivePaymentResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::ReceivePaymentResponse>>
    for crate::models::ReceivePaymentResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::ReceivePaymentResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::RecommendedFees> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.fastest_fee.into_into_dart().into_dart(),
            self.0.half_hour_fee.into_into_dart().into_dart(),
            self.0.hour_fee.into_into_dart().into_dart(),
            self.0.economy_fee.into_into_dart().into_dart(),
            self.0.minimum_fee.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::RecommendedFees>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::RecommendedFees>>
    for crate::models::RecommendedFees
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::RecommendedFees> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::RefundRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.swap_address.into_into_dart().into_dart(),
            self.0.refund_address.into_into_dart().into_dart(),
            self.0.fee_rate_sat_per_vbyte.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::RefundRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::RefundRequest>>
    for crate::models::RefundRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::RefundRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::RefundResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.refund_tx_id.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::RefundResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::RefundResponse>>
    for crate::models::RefundResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::RefundResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::RefundableSwap> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.swap_address.into_into_dart().into_dart(),
            self.0.timestamp.into_into_dart().into_dart(),
            self.0.amount_sat.into_into_dart().into_dart(),
            self.0.last_refund_tx_id.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::RefundableSwap>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::RefundableSwap>>
    for crate::models::RefundableSwap
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::RefundableSwap> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::RestoreRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.backup_path.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::RestoreRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::RestoreRequest>>
    for crate::models::RestoreRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::RestoreRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::RouteHint> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.hops.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::RouteHint>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::RouteHint>>
    for crate::models::RouteHint
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::RouteHint> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::RouteHintHop> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.src_node_id.into_into_dart().into_dart(),
            self.0.short_channel_id.into_into_dart().into_dart(),
            self.0.fees_base_msat.into_into_dart().into_dart(),
            self.0
                .fees_proportional_millionths
                .into_into_dart()
                .into_dart(),
            self.0.cltv_expiry_delta.into_into_dart().into_dart(),
            self.0.htlc_minimum_msat.into_into_dart().into_dart(),
            self.0.htlc_maximum_msat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::RouteHintHop>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::RouteHintHop>>
    for crate::models::RouteHintHop
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::RouteHintHop> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::errors::SdkError> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::errors::SdkError::AlreadyStarted => [0.into_dart()].into_dart(),
            crate::errors::SdkError::Generic { err } => {
                [1.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::errors::SdkError::NotStarted => [2.into_dart()].into_dart(),
            crate::errors::SdkError::ServiceConnectivity { err } => {
                [3.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::errors::SdkError>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::errors::SdkError>>
    for crate::errors::SdkError
{
    fn into_into_dart(self) -> FrbWrapper<crate::errors::SdkError> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::events::SdkEvent> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::events::SdkEvent::PaymentFailed { details } => {
                [0.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::events::SdkEvent::PaymentPending { details } => {
                [1.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::events::SdkEvent::PaymentRefundable { details } => {
                [2.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::events::SdkEvent::PaymentRefunded { details } => {
                [3.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::events::SdkEvent::PaymentRefundPending { details } => {
                [4.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::events::SdkEvent::PaymentSucceeded { details } => {
                [5.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::events::SdkEvent::PaymentWaitingConfirmation { details } => {
                [6.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::events::SdkEvent::PaymentWaitingFeeAcceptance { details } => {
                [7.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::events::SdkEvent::Synced => [8.into_dart()].into_dart(),
            crate::events::SdkEvent::DataSynced {
                did_pull_new_records,
            } => [
                9.into_dart(),
                did_pull_new_records.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::events::SdkEvent>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::events::SdkEvent>>
    for crate::events::SdkEvent
{
    fn into_into_dart(self) -> FrbWrapper<crate::events::SdkEvent> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::SendDestination> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::SendDestination::LiquidAddress {
                address_data,
                bip353_address,
            } => [
                0.into_dart(),
                address_data.into_into_dart().into_dart(),
                bip353_address.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::models::SendDestination::Bolt11 {
                invoice,
                bip353_address,
            } => [
                1.into_dart(),
                invoice.into_into_dart().into_dart(),
                bip353_address.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::models::SendDestination::Bolt12 {
                offer,
                receiver_amount_sat,
                bip353_address,
            } => [
                2.into_dart(),
                offer.into_into_dart().into_dart(),
                receiver_amount_sat.into_into_dart().into_dart(),
                bip353_address.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::SendDestination>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::SendDestination>>
    for crate::models::SendDestination
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::SendDestination> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::SendPaymentRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.prepare_response.into_into_dart().into_dart(),
            self.0.use_asset_fees.into_into_dart().into_dart(),
            self.0.payer_note.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::SendPaymentRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::SendPaymentRequest>>
    for crate::models::SendPaymentRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::SendPaymentRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::SendPaymentResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.payment.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::SendPaymentResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::SendPaymentResponse>>
    for crate::models::SendPaymentResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::SendPaymentResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::SignMessageRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::SignMessageRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::SignMessageRequest>>
    for crate::models::SignMessageRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::SignMessageRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::SignMessageResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.signature.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::SignMessageResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::SignMessageResponse>>
    for crate::models::SignMessageResponse
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::SignMessageResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::SuccessAction> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::SuccessAction::Aes { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::models::SuccessAction::Message { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::models::SuccessAction::Url { data } => {
                [2.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::SuccessAction>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::SuccessAction>>
    for crate::models::SuccessAction
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::SuccessAction> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::SuccessActionProcessed> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::models::SuccessActionProcessed::Aes { result } => {
                [0.into_dart(), result.into_into_dart().into_dart()].into_dart()
            }
            crate::models::SuccessActionProcessed::Message { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::models::SuccessActionProcessed::Url { data } => {
                [2.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::SuccessActionProcessed>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::SuccessActionProcessed>>
    for crate::models::SuccessActionProcessed
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::SuccessActionProcessed> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::Symbol> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.grapheme.into_into_dart().into_dart(),
            self.0.template.into_into_dart().into_dart(),
            self.0.rtl.into_into_dart().into_dart(),
            self.0.position.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::Symbol>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::Symbol>>
    for crate::models::Symbol
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::Symbol> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::UrlSuccessActionData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.description.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
            self.0.matches_callback_domain.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::UrlSuccessActionData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::UrlSuccessActionData>>
    for crate::models::UrlSuccessActionData
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::UrlSuccessActionData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::models::WalletInfo> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.balance_sat.into_into_dart().into_dart(),
            self.0.pending_send_sat.into_into_dart().into_dart(),
            self.0.pending_receive_sat.into_into_dart().into_dart(),
            self.0.fingerprint.into_into_dart().into_dart(),
            self.0.pubkey.into_into_dart().into_dart(),
            self.0.asset_balances.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::models::WalletInfo>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::models::WalletInfo>>
    for crate::models::WalletInfo
{
    fn into_into_dart(self) -> FrbWrapper<crate::models::WalletInfo> {
        self.into()
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for BreezSdkLiquid {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for StreamSink<crate::logger::LogEntry, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<crate::events::SdkEvent, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::models::AcceptPaymentProposedFeesRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::FetchPaymentProposedFeesResponse>::sse_encode(self.response, serializer);
    }
}

impl SseEncode for crate::models::AesSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.ciphertext, serializer);
        <String>::sse_encode(self.iv, serializer);
    }
}

impl SseEncode for crate::models::AesSuccessActionDataDecrypted {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.plaintext, serializer);
    }
}

impl SseEncode for crate::models::AesSuccessActionDataResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::AesSuccessActionDataResult::Decrypted { data } => {
                <i32>::sse_encode(0, serializer);
                <crate::models::AesSuccessActionDataDecrypted>::sse_encode(data, serializer);
            }
            crate::models::AesSuccessActionDataResult::ErrorStatus { reason } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(reason, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::Amount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::Amount::Bitcoin { amount_msat } => {
                <i32>::sse_encode(0, serializer);
                <u64>::sse_encode(amount_msat, serializer);
            }
            crate::models::Amount::Currency {
                iso4217_code,
                fractional_amount,
            } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(iso4217_code, serializer);
                <u64>::sse_encode(fractional_amount, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::AssetBalance {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.asset_id, serializer);
        <u64>::sse_encode(self.balance_sat, serializer);
        <Option<String>>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.ticker, serializer);
        <Option<f64>>::sse_encode(self.balance, serializer);
    }
}

impl SseEncode for crate::models::AssetInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.ticker, serializer);
        <f64>::sse_encode(self.amount, serializer);
        <Option<f64>>::sse_encode(self.fees, serializer);
    }
}

impl SseEncode for crate::models::AssetMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.asset_id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.ticker, serializer);
        <u8>::sse_encode(self.precision, serializer);
        <Option<String>>::sse_encode(self.fiat_id, serializer);
    }
}

impl SseEncode for crate::models::BackupRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.backup_path, serializer);
    }
}

impl SseEncode for crate::models::BitcoinAddressData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.address, serializer);
        <crate::models::Network>::sse_encode(self.network, serializer);
        <Option<u64>>::sse_encode(self.amount_sat, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::models::BlockchainExplorer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::BlockchainExplorer::Electrum { url } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(url, serializer);
            }
            crate::models::BlockchainExplorer::Esplora {
                url,
                use_waterfalls,
            } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(url, serializer);
                <bool>::sse_encode(use_waterfalls, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::BlockchainInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.liquid_tip, serializer);
        <u32>::sse_encode(self.bitcoin_tip, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::models::BuyBitcoinProvider {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::BuyBitcoinProvider::Moonpay => 0,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::models::BuyBitcoinRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::PrepareBuyBitcoinResponse>::sse_encode(self.prepare_response, serializer);
        <Option<String>>::sse_encode(self.redirect_url, serializer);
    }
}

impl SseEncode for crate::models::CheckMessageRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
        <String>::sse_encode(self.pubkey, serializer);
        <String>::sse_encode(self.signature, serializer);
    }
}

impl SseEncode for crate::models::CheckMessageResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_valid, serializer);
    }
}

impl SseEncode for crate::models::Config {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::BlockchainExplorer>::sse_encode(self.liquid_explorer, serializer);
        <crate::models::BlockchainExplorer>::sse_encode(self.bitcoin_explorer, serializer);
        <String>::sse_encode(self.working_dir, serializer);
        <crate::models::LiquidNetwork>::sse_encode(self.network, serializer);
        <u64>::sse_encode(self.payment_timeout_sec, serializer);
        <Option<String>>::sse_encode(self.sync_service_url, serializer);
        <Option<u64>>::sse_encode(self.zero_conf_max_amount_sat, serializer);
        <Option<String>>::sse_encode(self.breez_api_key, serializer);
        <Option<Vec<crate::models::ExternalInputParser>>>::sse_encode(
            self.external_input_parsers,
            serializer,
        );
        <bool>::sse_encode(self.use_default_external_input_parsers, serializer);
        <Option<u64>>::sse_encode(self.onchain_fee_rate_leeway_sat, serializer);
        <Option<Vec<crate::models::AssetMetadata>>>::sse_encode(self.asset_metadata, serializer);
        <Option<String>>::sse_encode(self.sideswap_api_key, serializer);
        <bool>::sse_encode(self.use_magic_routing_hints, serializer);
    }
}

impl SseEncode for crate::models::ConnectRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::Config>::sse_encode(self.config, serializer);
        <Option<String>>::sse_encode(self.mnemonic, serializer);
        <Option<String>>::sse_encode(self.passphrase, serializer);
        <Option<Vec<u8>>>::sse_encode(self.seed, serializer);
    }
}

impl SseEncode for crate::models::CreateBolt12InvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.offer, serializer);
        <String>::sse_encode(self.invoice_request, serializer);
    }
}

impl SseEncode for crate::models::CreateBolt12InvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.invoice, serializer);
    }
}

impl SseEncode for crate::models::CurrencyInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <u32>::sse_encode(self.fraction_size, serializer);
        <Option<u32>>::sse_encode(self.spacing, serializer);
        <Option<crate::models::Symbol>>::sse_encode(self.symbol, serializer);
        <Option<crate::models::Symbol>>::sse_encode(self.uniq_symbol, serializer);
        <Vec<crate::models::LocalizedName>>::sse_encode(self.localized_name, serializer);
        <Vec<crate::models::LocaleOverrides>>::sse_encode(self.locale_overrides, serializer);
    }
}

impl SseEncode for crate::models::ExternalInputParser {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.provider_id, serializer);
        <String>::sse_encode(self.input_regex, serializer);
        <String>::sse_encode(self.parser_url, serializer);
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::models::FetchPaymentProposedFeesRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.swap_id, serializer);
    }
}

impl SseEncode for crate::models::FetchPaymentProposedFeesResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.swap_id, serializer);
        <u64>::sse_encode(self.fees_sat, serializer);
        <u64>::sse_encode(self.payer_amount_sat, serializer);
        <u64>::sse_encode(self.receiver_amount_sat, serializer);
    }
}

impl SseEncode for crate::models::FiatCurrency {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <crate::models::CurrencyInfo>::sse_encode(self.info, serializer);
    }
}

impl SseEncode for crate::models::GetInfoResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::WalletInfo>::sse_encode(self.wallet_info, serializer);
        <crate::models::BlockchainInfo>::sse_encode(self.blockchain_info, serializer);
    }
}

impl SseEncode for crate::models::GetPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::GetPaymentRequest::PaymentHash { payment_hash } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(payment_hash, serializer);
            }
            crate::models::GetPaymentRequest::SwapId { swap_id } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(swap_id, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::models::InputType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::InputType::BitcoinAddress { address } => {
                <i32>::sse_encode(0, serializer);
                <crate::models::BitcoinAddressData>::sse_encode(address, serializer);
            }
            crate::models::InputType::LiquidAddress { address } => {
                <i32>::sse_encode(1, serializer);
                <crate::models::LiquidAddressData>::sse_encode(address, serializer);
            }
            crate::models::InputType::Bolt11 { invoice } => {
                <i32>::sse_encode(2, serializer);
                <crate::models::LNInvoice>::sse_encode(invoice, serializer);
            }
            crate::models::InputType::Bolt12Offer {
                offer,
                bip353_address,
            } => {
                <i32>::sse_encode(3, serializer);
                <crate::models::LNOffer>::sse_encode(offer, serializer);
                <Option<String>>::sse_encode(bip353_address, serializer);
            }
            crate::models::InputType::NodeId { node_id } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(node_id, serializer);
            }
            crate::models::InputType::Url { url } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(url, serializer);
            }
            crate::models::InputType::LnUrlPay {
                data,
                bip353_address,
            } => {
                <i32>::sse_encode(6, serializer);
                <crate::models::LnUrlPayRequestData>::sse_encode(data, serializer);
                <Option<String>>::sse_encode(bip353_address, serializer);
            }
            crate::models::InputType::LnUrlWithdraw { data } => {
                <i32>::sse_encode(7, serializer);
                <crate::models::LnUrlWithdrawRequestData>::sse_encode(data, serializer);
            }
            crate::models::InputType::LnUrlAuth { data } => {
                <i32>::sse_encode(8, serializer);
                <crate::models::LnUrlAuthRequestData>::sse_encode(data, serializer);
            }
            crate::models::InputType::LnUrlError { data } => {
                <i32>::sse_encode(9, serializer);
                <crate::models::LnUrlErrorData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::LightningPaymentLimitsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::Limits>::sse_encode(self.send, serializer);
        <crate::models::Limits>::sse_encode(self.receive, serializer);
    }
}

impl SseEncode for crate::models::Limits {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.min_sat, serializer);
        <u64>::sse_encode(self.max_sat, serializer);
        <u64>::sse_encode(self.max_zero_conf_sat, serializer);
    }
}

impl SseEncode for crate::models::LiquidAddressData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.address, serializer);
        <crate::models::Network>::sse_encode(self.network, serializer);
        <Option<String>>::sse_encode(self.asset_id, serializer);
        <Option<f64>>::sse_encode(self.amount, serializer);
        <Option<u64>>::sse_encode(self.amount_sat, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::models::LiquidNetwork {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::LiquidNetwork::Mainnet => 0,
                crate::models::LiquidNetwork::Testnet => 1,
                crate::models::LiquidNetwork::Regtest => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::AssetBalance> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::AssetBalance>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::AssetMetadata> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::AssetMetadata>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::ExternalInputParser> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::ExternalInputParser>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::FiatCurrency> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::FiatCurrency>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::LnOfferBlindedPath> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::LnOfferBlindedPath>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::LocaleOverrides> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::LocaleOverrides>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::LocalizedName> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::LocalizedName>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::Payment>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::models::ListPaymentDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::ListPaymentDetails::Liquid {
                asset_id,
                destination,
            } => {
                <i32>::sse_encode(0, serializer);
                <Option<String>>::sse_encode(asset_id, serializer);
                <Option<String>>::sse_encode(destination, serializer);
            }
            crate::models::ListPaymentDetails::Bitcoin { address } => {
                <i32>::sse_encode(1, serializer);
                <Option<String>>::sse_encode(address, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for Vec<crate::models::PaymentState> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::PaymentState>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::PaymentType> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::PaymentType>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::models::ListPaymentsRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<Vec<crate::models::PaymentType>>>::sse_encode(self.filters, serializer);
        <Option<Vec<crate::models::PaymentState>>>::sse_encode(self.states, serializer);
        <Option<i64>>::sse_encode(self.from_timestamp, serializer);
        <Option<i64>>::sse_encode(self.to_timestamp, serializer);
        <Option<u32>>::sse_encode(self.offset, serializer);
        <Option<u32>>::sse_encode(self.limit, serializer);
        <Option<crate::models::ListPaymentDetails>>::sse_encode(self.details, serializer);
        <Option<bool>>::sse_encode(self.sort_ascending, serializer);
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::Rate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::Rate>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::RefundableSwap> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::RefundableSwap>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::RouteHint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::RouteHint>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::RouteHintHop> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::RouteHintHop>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::models::LNInvoice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.bolt11, serializer);
        <crate::models::Network>::sse_encode(self.network, serializer);
        <String>::sse_encode(self.payee_pubkey, serializer);
        <String>::sse_encode(self.payment_hash, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <Option<String>>::sse_encode(self.description_hash, serializer);
        <Option<u64>>::sse_encode(self.amount_msat, serializer);
        <u64>::sse_encode(self.timestamp, serializer);
        <u64>::sse_encode(self.expiry, serializer);
        <Vec<crate::models::RouteHint>>::sse_encode(self.routing_hints, serializer);
        <Vec<u8>>::sse_encode(self.payment_secret, serializer);
        <u64>::sse_encode(self.min_final_cltv_expiry_delta, serializer);
    }
}

impl SseEncode for crate::models::LNOffer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.offer, serializer);
        <Vec<String>>::sse_encode(self.chains, serializer);
        <Option<crate::models::Amount>>::sse_encode(self.min_amount, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <Option<u64>>::sse_encode(self.absolute_expiry, serializer);
        <Option<String>>::sse_encode(self.issuer, serializer);
        <Option<String>>::sse_encode(self.signing_pubkey, serializer);
        <Vec<crate::models::LnOfferBlindedPath>>::sse_encode(self.paths, serializer);
    }
}

impl SseEncode for crate::models::LnOfferBlindedPath {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.blinded_hops, serializer);
    }
}

impl SseEncode for crate::duplicates::LnUrlAuthError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::duplicates::LnUrlAuthError::Generic { err } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlAuthError::InvalidUri { err } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlAuthError::ServiceConnectivity { err } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(err, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::LnUrlAuthRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.k1, serializer);
        <Option<String>>::sse_encode(self.action, serializer);
        <String>::sse_encode(self.domain, serializer);
        <String>::sse_encode(self.url, serializer);
    }
}

impl SseEncode for crate::duplicates::LnUrlCallbackStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::duplicates::LnUrlCallbackStatus::Ok => {
                <i32>::sse_encode(0, serializer);
            }
            crate::duplicates::LnUrlCallbackStatus::ErrorStatus { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::models::LnUrlErrorData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::LnUrlErrorData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.reason, serializer);
    }
}

impl SseEncode for crate::models::LnUrlInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.ln_address, serializer);
        <Option<String>>::sse_encode(self.lnurl_pay_comment, serializer);
        <Option<String>>::sse_encode(self.lnurl_pay_domain, serializer);
        <Option<String>>::sse_encode(self.lnurl_pay_metadata, serializer);
        <Option<crate::models::SuccessActionProcessed>>::sse_encode(
            self.lnurl_pay_success_action,
            serializer,
        );
        <Option<crate::models::SuccessAction>>::sse_encode(
            self.lnurl_pay_unprocessed_success_action,
            serializer,
        );
        <Option<String>>::sse_encode(self.lnurl_withdraw_endpoint, serializer);
    }
}

impl SseEncode for crate::duplicates::LnUrlPayError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::duplicates::LnUrlPayError::AlreadyPaid => {
                <i32>::sse_encode(0, serializer);
            }
            crate::duplicates::LnUrlPayError::Generic { err } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlPayError::InsufficientBalance { err } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlPayError::InvalidAmount { err } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlPayError::InvalidInvoice { err } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlPayError::InvalidNetwork { err } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlPayError::InvalidUri { err } => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlPayError::InvoiceExpired { err } => {
                <i32>::sse_encode(7, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlPayError::PaymentFailed { err } => {
                <i32>::sse_encode(8, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlPayError::PaymentTimeout { err } => {
                <i32>::sse_encode(9, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlPayError::RouteNotFound { err } => {
                <i32>::sse_encode(10, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlPayError::RouteTooExpensive { err } => {
                <i32>::sse_encode(11, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlPayError::ServiceConnectivity { err } => {
                <i32>::sse_encode(12, serializer);
                <String>::sse_encode(err, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::LnUrlPayErrorData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.payment_hash, serializer);
        <String>::sse_encode(self.reason, serializer);
    }
}

impl SseEncode for crate::models::LnUrlPayRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::PrepareLnUrlPayResponse>::sse_encode(self.prepare_response, serializer);
    }
}

impl SseEncode for crate::models::LnUrlPayRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.callback, serializer);
        <u64>::sse_encode(self.min_sendable, serializer);
        <u64>::sse_encode(self.max_sendable, serializer);
        <String>::sse_encode(self.metadata_str, serializer);
        <u16>::sse_encode(self.comment_allowed, serializer);
        <String>::sse_encode(self.domain, serializer);
        <bool>::sse_encode(self.allows_nostr, serializer);
        <Option<String>>::sse_encode(self.nostr_pubkey, serializer);
        <Option<String>>::sse_encode(self.ln_address, serializer);
    }
}

impl SseEncode for crate::models::LnUrlPayResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::LnUrlPayResult::EndpointSuccess { data } => {
                <i32>::sse_encode(0, serializer);
                <crate::models::LnUrlPaySuccessData>::sse_encode(data, serializer);
            }
            crate::models::LnUrlPayResult::EndpointError { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::models::LnUrlErrorData>::sse_encode(data, serializer);
            }
            crate::models::LnUrlPayResult::PayError { data } => {
                <i32>::sse_encode(2, serializer);
                <crate::models::LnUrlPayErrorData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::LnUrlPaySuccessData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::Payment>::sse_encode(self.payment, serializer);
        <Option<crate::models::SuccessActionProcessed>>::sse_encode(
            self.success_action,
            serializer,
        );
    }
}

impl SseEncode for crate::duplicates::LnUrlWithdrawError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::duplicates::LnUrlWithdrawError::Generic { err } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlWithdrawError::InvalidAmount { err } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlWithdrawError::InvalidInvoice { err } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlWithdrawError::InvalidUri { err } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlWithdrawError::InvoiceNoRoutingHints { err } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::duplicates::LnUrlWithdrawError::ServiceConnectivity { err } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(err, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::LnUrlWithdrawRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::LnUrlWithdrawRequestData>::sse_encode(self.data, serializer);
        <u64>::sse_encode(self.amount_msat, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
    }
}

impl SseEncode for crate::models::LnUrlWithdrawRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.callback, serializer);
        <String>::sse_encode(self.k1, serializer);
        <String>::sse_encode(self.default_description, serializer);
        <u64>::sse_encode(self.min_withdrawable, serializer);
        <u64>::sse_encode(self.max_withdrawable, serializer);
    }
}

impl SseEncode for crate::duplicates::LnUrlWithdrawResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::duplicates::LnUrlWithdrawResult::Ok { data } => {
                <i32>::sse_encode(0, serializer);
                <crate::duplicates::LnUrlWithdrawSuccessData>::sse_encode(data, serializer);
            }
            crate::duplicates::LnUrlWithdrawResult::Timeout { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::duplicates::LnUrlWithdrawSuccessData>::sse_encode(data, serializer);
            }
            crate::duplicates::LnUrlWithdrawResult::ErrorStatus { data } => {
                <i32>::sse_encode(2, serializer);
                <crate::models::LnUrlErrorData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::duplicates::LnUrlWithdrawSuccessData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::LNInvoice>::sse_encode(self.invoice, serializer);
    }
}

impl SseEncode for crate::models::LocaleOverrides {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.locale, serializer);
        <Option<u32>>::sse_encode(self.spacing, serializer);
        <crate::models::Symbol>::sse_encode(self.symbol, serializer);
    }
}

impl SseEncode for crate::models::LocalizedName {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.locale, serializer);
        <String>::sse_encode(self.name, serializer);
    }
}

impl SseEncode for crate::logger::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.line, serializer);
        <String>::sse_encode(self.level, serializer);
    }
}

impl SseEncode for crate::models::MessageSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::models::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::Network::Bitcoin => 0,
                crate::models::Network::Testnet => 1,
                crate::models::Network::Signet => 2,
                crate::models::Network::Regtest => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::models::OnchainPaymentLimitsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::Limits>::sse_encode(self.send, serializer);
        <crate::models::Limits>::sse_encode(self.receive, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::Amount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::Amount>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::AssetInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::AssetInfo>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::ListPaymentDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::ListPaymentDetails>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::LnUrlInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::LnUrlInfo>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::PayAmount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::PayAmount>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::Payment>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::ReceiveAmount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::ReceiveAmount>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::SuccessAction> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::SuccessAction>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::SuccessActionProcessed> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::SuccessActionProcessed>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::Symbol> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::Symbol>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::models::AssetMetadata>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::models::AssetMetadata>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::models::ExternalInputParser>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::models::ExternalInputParser>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::models::PaymentState>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::models::PaymentState>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::models::PaymentType>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::models::PaymentType>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::models::PayAmount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::PayAmount::Bitcoin {
                receiver_amount_sat,
            } => {
                <i32>::sse_encode(0, serializer);
                <u64>::sse_encode(receiver_amount_sat, serializer);
            }
            crate::models::PayAmount::Asset {
                to_asset,
                receiver_amount,
                estimate_asset_fees,
                from_asset,
            } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(to_asset, serializer);
                <f64>::sse_encode(receiver_amount, serializer);
                <Option<bool>>::sse_encode(estimate_asset_fees, serializer);
                <Option<String>>::sse_encode(from_asset, serializer);
            }
            crate::models::PayAmount::Drain => {
                <i32>::sse_encode(2, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::PayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.address, serializer);
        <crate::models::PreparePayOnchainResponse>::sse_encode(self.prepare_response, serializer);
    }
}

impl SseEncode for crate::models::Payment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.destination, serializer);
        <Option<String>>::sse_encode(self.tx_id, serializer);
        <Option<String>>::sse_encode(self.unblinding_data, serializer);
        <u32>::sse_encode(self.timestamp, serializer);
        <u64>::sse_encode(self.amount_sat, serializer);
        <u64>::sse_encode(self.fees_sat, serializer);
        <Option<u64>>::sse_encode(self.swapper_fees_sat, serializer);
        <crate::models::PaymentType>::sse_encode(self.payment_type, serializer);
        <crate::models::PaymentState>::sse_encode(self.status, serializer);
        <crate::models::PaymentDetails>::sse_encode(self.details, serializer);
    }
}

impl SseEncode for crate::models::PaymentDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::PaymentDetails::Lightning {
                swap_id,
                description,
                liquid_expiration_blockheight,
                preimage,
                invoice,
                bolt12_offer,
                payment_hash,
                destination_pubkey,
                lnurl_info,
                bip353_address,
                payer_note,
                claim_tx_id,
                refund_tx_id,
                refund_tx_amount_sat,
            } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(swap_id, serializer);
                <String>::sse_encode(description, serializer);
                <u32>::sse_encode(liquid_expiration_blockheight, serializer);
                <Option<String>>::sse_encode(preimage, serializer);
                <Option<String>>::sse_encode(invoice, serializer);
                <Option<String>>::sse_encode(bolt12_offer, serializer);
                <Option<String>>::sse_encode(payment_hash, serializer);
                <Option<String>>::sse_encode(destination_pubkey, serializer);
                <Option<crate::models::LnUrlInfo>>::sse_encode(lnurl_info, serializer);
                <Option<String>>::sse_encode(bip353_address, serializer);
                <Option<String>>::sse_encode(payer_note, serializer);
                <Option<String>>::sse_encode(claim_tx_id, serializer);
                <Option<String>>::sse_encode(refund_tx_id, serializer);
                <Option<u64>>::sse_encode(refund_tx_amount_sat, serializer);
            }
            crate::models::PaymentDetails::Liquid {
                destination,
                description,
                asset_id,
                asset_info,
                lnurl_info,
                bip353_address,
                payer_note,
            } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(destination, serializer);
                <String>::sse_encode(description, serializer);
                <String>::sse_encode(asset_id, serializer);
                <Option<crate::models::AssetInfo>>::sse_encode(asset_info, serializer);
                <Option<crate::models::LnUrlInfo>>::sse_encode(lnurl_info, serializer);
                <Option<String>>::sse_encode(bip353_address, serializer);
                <Option<String>>::sse_encode(payer_note, serializer);
            }
            crate::models::PaymentDetails::Bitcoin {
                swap_id,
                bitcoin_address,
                description,
                auto_accepted_fees,
                liquid_expiration_blockheight,
                bitcoin_expiration_blockheight,
                lockup_tx_id,
                claim_tx_id,
                refund_tx_id,
                refund_tx_amount_sat,
            } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(swap_id, serializer);
                <String>::sse_encode(bitcoin_address, serializer);
                <String>::sse_encode(description, serializer);
                <bool>::sse_encode(auto_accepted_fees, serializer);
                <u32>::sse_encode(liquid_expiration_blockheight, serializer);
                <u32>::sse_encode(bitcoin_expiration_blockheight, serializer);
                <Option<String>>::sse_encode(lockup_tx_id, serializer);
                <Option<String>>::sse_encode(claim_tx_id, serializer);
                <Option<String>>::sse_encode(refund_tx_id, serializer);
                <Option<u64>>::sse_encode(refund_tx_amount_sat, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::errors::PaymentError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::errors::PaymentError::AlreadyClaimed => {
                <i32>::sse_encode(0, serializer);
            }
            crate::errors::PaymentError::AlreadyPaid => {
                <i32>::sse_encode(1, serializer);
            }
            crate::errors::PaymentError::PaymentInProgress => {
                <i32>::sse_encode(2, serializer);
            }
            crate::errors::PaymentError::AmountOutOfRange { min, max } => {
                <i32>::sse_encode(3, serializer);
                <u64>::sse_encode(min, serializer);
                <u64>::sse_encode(max, serializer);
            }
            crate::errors::PaymentError::AmountMissing { err } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::errors::PaymentError::AssetError { err } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::errors::PaymentError::InvalidNetwork { err } => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::errors::PaymentError::Generic { err } => {
                <i32>::sse_encode(7, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::errors::PaymentError::InvalidOrExpiredFees => {
                <i32>::sse_encode(8, serializer);
            }
            crate::errors::PaymentError::InsufficientFunds => {
                <i32>::sse_encode(9, serializer);
            }
            crate::errors::PaymentError::InvalidDescription { err } => {
                <i32>::sse_encode(10, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::errors::PaymentError::InvalidInvoice { err } => {
                <i32>::sse_encode(11, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::errors::PaymentError::InvalidPreimage => {
                <i32>::sse_encode(12, serializer);
            }
            crate::errors::PaymentError::PairsNotFound => {
                <i32>::sse_encode(13, serializer);
            }
            crate::errors::PaymentError::PaymentTimeout => {
                <i32>::sse_encode(14, serializer);
            }
            crate::errors::PaymentError::PersistError => {
                <i32>::sse_encode(15, serializer);
            }
            crate::errors::PaymentError::ReceiveError { err } => {
                <i32>::sse_encode(16, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::errors::PaymentError::Refunded { err, refund_tx_id } => {
                <i32>::sse_encode(17, serializer);
                <String>::sse_encode(err, serializer);
                <String>::sse_encode(refund_tx_id, serializer);
            }
            crate::errors::PaymentError::SelfTransferNotSupported => {
                <i32>::sse_encode(18, serializer);
            }
            crate::errors::PaymentError::SendError { err } => {
                <i32>::sse_encode(19, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::errors::PaymentError::SignerError { err } => {
                <i32>::sse_encode(20, serializer);
                <String>::sse_encode(err, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::PaymentMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::PaymentMethod::Lightning => 0,
                crate::models::PaymentMethod::Bolt11Invoice => 1,
                crate::models::PaymentMethod::Bolt12Offer => 2,
                crate::models::PaymentMethod::BitcoinAddress => 3,
                crate::models::PaymentMethod::LiquidAddress => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::models::PaymentState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::PaymentState::Created => 0,
                crate::models::PaymentState::Pending => 1,
                crate::models::PaymentState::Complete => 2,
                crate::models::PaymentState::Failed => 3,
                crate::models::PaymentState::TimedOut => 4,
                crate::models::PaymentState::Refundable => 5,
                crate::models::PaymentState::RefundPending => 6,
                crate::models::PaymentState::WaitingFeeAcceptance => 7,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::models::PaymentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::PaymentType::Receive => 0,
                crate::models::PaymentType::Send => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::models::PrepareBuyBitcoinRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::BuyBitcoinProvider>::sse_encode(self.provider, serializer);
        <u64>::sse_encode(self.amount_sat, serializer);
    }
}

impl SseEncode for crate::models::PrepareBuyBitcoinResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::BuyBitcoinProvider>::sse_encode(self.provider, serializer);
        <u64>::sse_encode(self.amount_sat, serializer);
        <u64>::sse_encode(self.fees_sat, serializer);
    }
}

impl SseEncode for crate::models::PrepareLnUrlPayRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::LnUrlPayRequestData>::sse_encode(self.data, serializer);
        <crate::models::PayAmount>::sse_encode(self.amount, serializer);
        <Option<String>>::sse_encode(self.bip353_address, serializer);
        <Option<String>>::sse_encode(self.comment, serializer);
        <Option<bool>>::sse_encode(self.validate_success_action_url, serializer);
    }
}

impl SseEncode for crate::models::PrepareLnUrlPayResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::SendDestination>::sse_encode(self.destination, serializer);
        <u64>::sse_encode(self.fees_sat, serializer);
        <crate::models::LnUrlPayRequestData>::sse_encode(self.data, serializer);
        <crate::models::PayAmount>::sse_encode(self.amount, serializer);
        <Option<String>>::sse_encode(self.comment, serializer);
        <Option<crate::models::SuccessAction>>::sse_encode(self.success_action, serializer);
    }
}

impl SseEncode for crate::models::PreparePayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::PayAmount>::sse_encode(self.amount, serializer);
        <Option<u32>>::sse_encode(self.fee_rate_sat_per_vbyte, serializer);
    }
}

impl SseEncode for crate::models::PreparePayOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.receiver_amount_sat, serializer);
        <u64>::sse_encode(self.claim_fees_sat, serializer);
        <u64>::sse_encode(self.total_fees_sat, serializer);
    }
}

impl SseEncode for crate::models::PrepareReceiveRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::PaymentMethod>::sse_encode(self.payment_method, serializer);
        <Option<crate::models::ReceiveAmount>>::sse_encode(self.amount, serializer);
    }
}

impl SseEncode for crate::models::PrepareReceiveResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::PaymentMethod>::sse_encode(self.payment_method, serializer);
        <u64>::sse_encode(self.fees_sat, serializer);
        <Option<crate::models::ReceiveAmount>>::sse_encode(self.amount, serializer);
        <Option<u64>>::sse_encode(self.min_payer_amount_sat, serializer);
        <Option<u64>>::sse_encode(self.max_payer_amount_sat, serializer);
        <Option<f64>>::sse_encode(self.swapper_feerate, serializer);
    }
}

impl SseEncode for crate::models::PrepareRefundRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.swap_address, serializer);
        <String>::sse_encode(self.refund_address, serializer);
        <u32>::sse_encode(self.fee_rate_sat_per_vbyte, serializer);
    }
}

impl SseEncode for crate::models::PrepareRefundResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.tx_vsize, serializer);
        <u64>::sse_encode(self.tx_fee_sat, serializer);
        <Option<String>>::sse_encode(self.last_refund_tx_id, serializer);
    }
}

impl SseEncode for crate::models::PrepareSendRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.destination, serializer);
        <Option<crate::models::PayAmount>>::sse_encode(self.amount, serializer);
    }
}

impl SseEncode for crate::models::PrepareSendResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::SendDestination>::sse_encode(self.destination, serializer);
        <Option<crate::models::PayAmount>>::sse_encode(self.amount, serializer);
        <Option<u64>>::sse_encode(self.fees_sat, serializer);
        <Option<f64>>::sse_encode(self.estimated_asset_fees, serializer);
        <Option<u64>>::sse_encode(self.exchange_amount_sat, serializer);
    }
}

impl SseEncode for crate::models::Rate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.coin, serializer);
        <f64>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::models::ReceiveAmount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::ReceiveAmount::Bitcoin { payer_amount_sat } => {
                <i32>::sse_encode(0, serializer);
                <u64>::sse_encode(payer_amount_sat, serializer);
            }
            crate::models::ReceiveAmount::Asset {
                asset_id,
                payer_amount,
            } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(asset_id, serializer);
                <Option<f64>>::sse_encode(payer_amount, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::ReceivePaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::PrepareReceiveResponse>::sse_encode(self.prepare_response, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <Option<bool>>::sse_encode(self.use_description_hash, serializer);
        <Option<String>>::sse_encode(self.payer_note, serializer);
    }
}

impl SseEncode for crate::models::ReceivePaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.destination, serializer);
        <Option<u32>>::sse_encode(self.liquid_expiration_blockheight, serializer);
        <Option<u32>>::sse_encode(self.bitcoin_expiration_blockheight, serializer);
    }
}

impl SseEncode for crate::models::RecommendedFees {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.fastest_fee, serializer);
        <u64>::sse_encode(self.half_hour_fee, serializer);
        <u64>::sse_encode(self.hour_fee, serializer);
        <u64>::sse_encode(self.economy_fee, serializer);
        <u64>::sse_encode(self.minimum_fee, serializer);
    }
}

impl SseEncode for crate::models::RefundRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.swap_address, serializer);
        <String>::sse_encode(self.refund_address, serializer);
        <u32>::sse_encode(self.fee_rate_sat_per_vbyte, serializer);
    }
}

impl SseEncode for crate::models::RefundResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.refund_tx_id, serializer);
    }
}

impl SseEncode for crate::models::RefundableSwap {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.swap_address, serializer);
        <u32>::sse_encode(self.timestamp, serializer);
        <u64>::sse_encode(self.amount_sat, serializer);
        <Option<String>>::sse_encode(self.last_refund_tx_id, serializer);
    }
}

impl SseEncode for crate::models::RestoreRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.backup_path, serializer);
    }
}

impl SseEncode for crate::models::RouteHint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::models::RouteHintHop>>::sse_encode(self.hops, serializer);
    }
}

impl SseEncode for crate::models::RouteHintHop {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.src_node_id, serializer);
        <String>::sse_encode(self.short_channel_id, serializer);
        <u32>::sse_encode(self.fees_base_msat, serializer);
        <u32>::sse_encode(self.fees_proportional_millionths, serializer);
        <u64>::sse_encode(self.cltv_expiry_delta, serializer);
        <Option<u64>>::sse_encode(self.htlc_minimum_msat, serializer);
        <Option<u64>>::sse_encode(self.htlc_maximum_msat, serializer);
    }
}

impl SseEncode for crate::errors::SdkError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::errors::SdkError::AlreadyStarted => {
                <i32>::sse_encode(0, serializer);
            }
            crate::errors::SdkError::Generic { err } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::errors::SdkError::NotStarted => {
                <i32>::sse_encode(2, serializer);
            }
            crate::errors::SdkError::ServiceConnectivity { err } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(err, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::events::SdkEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::events::SdkEvent::PaymentFailed { details } => {
                <i32>::sse_encode(0, serializer);
                <crate::models::Payment>::sse_encode(details, serializer);
            }
            crate::events::SdkEvent::PaymentPending { details } => {
                <i32>::sse_encode(1, serializer);
                <crate::models::Payment>::sse_encode(details, serializer);
            }
            crate::events::SdkEvent::PaymentRefundable { details } => {
                <i32>::sse_encode(2, serializer);
                <crate::models::Payment>::sse_encode(details, serializer);
            }
            crate::events::SdkEvent::PaymentRefunded { details } => {
                <i32>::sse_encode(3, serializer);
                <crate::models::Payment>::sse_encode(details, serializer);
            }
            crate::events::SdkEvent::PaymentRefundPending { details } => {
                <i32>::sse_encode(4, serializer);
                <crate::models::Payment>::sse_encode(details, serializer);
            }
            crate::events::SdkEvent::PaymentSucceeded { details } => {
                <i32>::sse_encode(5, serializer);
                <crate::models::Payment>::sse_encode(details, serializer);
            }
            crate::events::SdkEvent::PaymentWaitingConfirmation { details } => {
                <i32>::sse_encode(6, serializer);
                <crate::models::Payment>::sse_encode(details, serializer);
            }
            crate::events::SdkEvent::PaymentWaitingFeeAcceptance { details } => {
                <i32>::sse_encode(7, serializer);
                <crate::models::Payment>::sse_encode(details, serializer);
            }
            crate::events::SdkEvent::Synced => {
                <i32>::sse_encode(8, serializer);
            }
            crate::events::SdkEvent::DataSynced {
                did_pull_new_records,
            } => {
                <i32>::sse_encode(9, serializer);
                <bool>::sse_encode(did_pull_new_records, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::SendDestination {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::SendDestination::LiquidAddress {
                address_data,
                bip353_address,
            } => {
                <i32>::sse_encode(0, serializer);
                <crate::models::LiquidAddressData>::sse_encode(address_data, serializer);
                <Option<String>>::sse_encode(bip353_address, serializer);
            }
            crate::models::SendDestination::Bolt11 {
                invoice,
                bip353_address,
            } => {
                <i32>::sse_encode(1, serializer);
                <crate::models::LNInvoice>::sse_encode(invoice, serializer);
                <Option<String>>::sse_encode(bip353_address, serializer);
            }
            crate::models::SendDestination::Bolt12 {
                offer,
                receiver_amount_sat,
                bip353_address,
            } => {
                <i32>::sse_encode(2, serializer);
                <crate::models::LNOffer>::sse_encode(offer, serializer);
                <u64>::sse_encode(receiver_amount_sat, serializer);
                <Option<String>>::sse_encode(bip353_address, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::SendPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::PrepareSendResponse>::sse_encode(self.prepare_response, serializer);
        <Option<bool>>::sse_encode(self.use_asset_fees, serializer);
        <Option<String>>::sse_encode(self.payer_note, serializer);
    }
}

impl SseEncode for crate::models::SendPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::Payment>::sse_encode(self.payment, serializer);
    }
}

impl SseEncode for crate::models::SignMessageRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::models::SignMessageResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.signature, serializer);
    }
}

impl SseEncode for crate::models::SuccessAction {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::SuccessAction::Aes { data } => {
                <i32>::sse_encode(0, serializer);
                <crate::models::AesSuccessActionData>::sse_encode(data, serializer);
            }
            crate::models::SuccessAction::Message { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::models::MessageSuccessActionData>::sse_encode(data, serializer);
            }
            crate::models::SuccessAction::Url { data } => {
                <i32>::sse_encode(2, serializer);
                <crate::models::UrlSuccessActionData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::SuccessActionProcessed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::SuccessActionProcessed::Aes { result } => {
                <i32>::sse_encode(0, serializer);
                <crate::models::AesSuccessActionDataResult>::sse_encode(result, serializer);
            }
            crate::models::SuccessActionProcessed::Message { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::models::MessageSuccessActionData>::sse_encode(data, serializer);
            }
            crate::models::SuccessActionProcessed::Url { data } => {
                <i32>::sse_encode(2, serializer);
                <crate::models::UrlSuccessActionData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::Symbol {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.grapheme, serializer);
        <Option<String>>::sse_encode(self.template, serializer);
        <Option<bool>>::sse_encode(self.rtl, serializer);
        <Option<u32>>::sse_encode(self.position, serializer);
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::models::UrlSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.url, serializer);
        <bool>::sse_encode(self.matches_callback_domain, serializer);
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::models::WalletInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.balance_sat, serializer);
        <u64>::sse_encode(self.pending_send_sat, serializer);
        <u64>::sse_encode(self.pending_receive_sat, serializer);
        <String>::sse_encode(self.fingerprint, serializer);
        <String>::sse_encode(self.pubkey, serializer);
        <Vec<crate::models::AssetBalance>>::sse_encode(self.asset_balances, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.

    // Section: imports

    use super::*;
    use crate::sdk::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_flutter_breez_liquid_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdkLiquid(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_flutter_breez_liquid_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdkLiquid(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdkLiquid>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
